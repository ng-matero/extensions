(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[864],{4318:p=>{p.exports='<span class="hljs-comment">/** No CSS for this example */</span>\n'},14236:(p,r,n)=>{"use strict";n.r(r),n.d(r,{default:()=>c});const c='<h1 id="drawer">Drawer</h1>\n<h2 id="api-reference-for-material-extensions-drawer">API reference for Material Extensions Drawer</h2>\n<p><code>import { MtxDrawerModule } from &apos;@ng-matero/extensions/drawer&apos;;</code></p>\n<h3 id="services">Services</h3>\n<h4 id="mtxdrawer"><code>MtxDrawer</code></h4>\n<p>Service to open Material Design drawers.</p>\n<h5 id="properties">Properties</h5>\n<table>\n<thead>\n<tr>\n<th align="left">Name</th>\n<th align="left">Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align="left"><code>afterAllDismissed: Observable&lt;void&gt;</code></td>\n<td align="left">Stream that emits when all open drawers have finished closing. Will emit on subscribe if there are no open drawers to begin with.</td>\n</tr>\n<tr>\n<td align="left"><code>afterOpened: Subject&lt;afterOpened&lt;any&gt;&gt;</code></td>\n<td align="left">Stream that emits when a drawer has been opened.</td>\n</tr>\n<tr>\n<td align="left"><code>openDrawers: MtxDrawerRef&lt;any&gt;[]</code></td>\n<td align="left">Keeps track of the currently-open drawers.</td>\n</tr>\n</tbody></table>\n<h5 id="methods">Methods</h5>\n<p><a>dismissAll</a></p>\n<p>Dismissed all of the currently-open dialogs.</p>\n<table>\n<thead>\n<tr>\n<th align="left"></th>\n<th align="left"></th>\n</tr>\n</thead>\n</table>\n<p><a>getDrawerById</a></p>\n<p>Finds an open drawer by its id.</p>\n<table>\n<thead>\n<tr>\n<th align="left"></th>\n<th align="left"></th>\n</tr>\n</thead>\n</table>\n<p><a>open</a></p>\n<p>Opens a drawer containing the given component.</p>\n<table>\n<thead>\n<tr>\n<th align="left">Parameters</th>\n<th align="left"></th>\n</tr>\n</thead>\n<tbody><tr>\n<td align="left"><code>component: ComponentType&lt;T&gt;</code></td>\n<td align="left">Type of the component to load into the drawer.</td>\n</tr>\n<tr>\n<td align="left"><code>config: MtxDrawerConfig&lt;D&gt;</code></td>\n<td align="left">Extra configuration options.</td>\n</tr>\n</tbody></table>\n<p><a>open</a></p>\n<p>Opens a drawer containing the given template.</p>\n<table>\n<thead>\n<tr>\n<th align="left">Parameters</th>\n<th align="left"></th>\n</tr>\n</thead>\n<tbody><tr>\n<td align="left"><code>template: TemplateRef&lt;T&gt;</code></td>\n<td align="left">TemplateRef to instantiate as the drawer content.</td>\n</tr>\n<tr>\n<td align="left"><code>config: MtxDrawerConfig&lt;D&gt;</code></td>\n<td align="left">Extra configuration options.</td>\n</tr>\n</tbody></table>\n<p><a>open</a></p>\n<table>\n<thead>\n<tr>\n<th align="left">Parameters</th>\n<th align="left"></th>\n</tr>\n</thead>\n<tbody><tr>\n<td align="left"><code>componentOrTemplateRef: ComponentType&lt;T&gt; | TemplateRef&lt;T&gt;</code></td>\n<td align="left">TemplateRef to instantiate as the drawer content.</td>\n</tr>\n<tr>\n<td align="left"><code>config: MtxDrawerConfig&lt;D&gt;</code></td>\n<td align="left">Extra configuration options.</td>\n</tr>\n</tbody></table>\n<h3 id="classes">Classes</h3>\n<h4 id="mtxdrawerconfig">MtxDrawerConfig</h4>\n<p>Configuration used when opening a drawer.</p>\n<h5 id="properties-1">Properties</h5>\n<table>\n<thead>\n<tr>\n<th align="left">Name</th>\n<th align="left">Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align="left"><code>ariaLabel: string | null</code></td>\n<td align="left">Aria label to assign to the drawer element.</td>\n</tr>\n<tr>\n<td align="left"><code>autoFocus: AutoFocusTarget | string | boolean</code></td>\n<td align="left">Where the drawer should focus on open.</td>\n</tr>\n<tr>\n<td align="left"><code>backdropClass: string</code></td>\n<td align="left">Custom class for the backdrop.</td>\n</tr>\n<tr>\n<td align="left"><code>closeOnNavigation: boolean</code></td>\n<td align="left">Whether the drawer should close when the user goes backwards/forwards in history. Note that this usually doesn&apos;t include clicking on links (unless the user is using the HashLocationStrategy).</td>\n</tr>\n<tr>\n<td align="left"><code>data: D | null</code></td>\n<td align="left">Data being injected into the child component.</td>\n</tr>\n<tr>\n<td align="left"><code>direction: Direction</code></td>\n<td align="left">Text layout direction for the drawer.</td>\n</tr>\n<tr>\n<td align="left"><code>disableClose: boolean</code></td>\n<td align="left">Whether the user can use escape or clicking outside to close the drawer.</td>\n</tr>\n<tr>\n<td align="left"><code>hasBackdrop: boolean</code></td>\n<td align="left">Whether the drawer has a backdrop.</td>\n</tr>\n<tr>\n<td align="left"><code>panelClass: string | string[]</code></td>\n<td align="left">Extra CSS classes to be added to the drawer container.</td>\n</tr>\n<tr>\n<td align="left"><code>restoreFocus: boolean</code></td>\n<td align="left">Whether the drawer should restore focus to the previously-focused element, after it&apos;s closed.</td>\n</tr>\n<tr>\n<td align="left"><code>scrollStrategy: ScrollStrategy</code></td>\n<td align="left">Scroll strategy to be used for the drawer.</td>\n</tr>\n<tr>\n<td align="left"><code>viewContainerRef: ViewContainerRef</code></td>\n<td align="left">The view container to place the overlay for the drawer into.</td>\n</tr>\n<tr>\n<td align="left"><code>id: string</code></td>\n<td align="left">ID for the drawer. If omitted, a unique one will be generated.</td>\n</tr>\n<tr>\n<td align="left"><code>position: DrawerPosition</code></td>\n<td align="left">Position of the drawer.</td>\n</tr>\n<tr>\n<td align="left"><code>width: string</code></td>\n<td align="left">Width of the drawer.</td>\n</tr>\n<tr>\n<td align="left"><code>height: string</code></td>\n<td align="left">Height of the drawer.</td>\n</tr>\n<tr>\n<td align="left"><code>minWidth: number | string</code></td>\n<td align="left">Min-width of the drawer. If a number is provided, assumes pixel units.</td>\n</tr>\n<tr>\n<td align="left"><code>minHeight: number | string</code></td>\n<td align="left">Min-height of the drawer. If a number is provided, assumes pixel units.</td>\n</tr>\n<tr>\n<td align="left"><code>maxWidth: number | string</code></td>\n<td align="left">Max-width of the drawer. If a number is provided, assumes pixel units.</td>\n</tr>\n<tr>\n<td align="left"><code>maxHeight: number | string</code></td>\n<td align="left">Max-height of the drawer. If a number is provided, assumes pixel units.</td>\n</tr>\n</tbody></table>\n<h4 id="mtxdrawerref">MtxDrawerRef</h4>\n<p>Reference to a drawer dispatched from the drawer service.</p>\n<h5 id="properties-2">Properties</h5>\n<table>\n<thead>\n<tr>\n<th align="left">Name</th>\n<th align="left">Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align="left"><code>componentRef: ComponentRef&lt;T&gt; | null</code></td>\n<td align="left">Unique ID for the drawer.</td>\n</tr>\n<tr>\n<td align="left"><code>disableClose: boolean | undefined</code></td>\n<td align="left">ComponentRef of the component opened into the drawer. Will be null when the drawer is opened using a TemplateRef.</td>\n</tr>\n<tr>\n<td align="left"><code>instance: T</code></td>\n<td align="left">Instance of the component making up the content of the drawer.</td>\n</tr>\n<tr>\n<td align="left"><code>id: string</code></td>\n<td align="left">Unique ID for the drawer.</td>\n</tr>\n</tbody></table>\n<h3 id="type-aliases">Type aliases</h3>\n<h4 id="autofocustarget"><code>AutoFocusTarget</code></h4>\n<p>Options for where to set focus to automatically on dialog open.</p>\n<pre class="hljs"><span class="hljs-keyword">type</span> <span class="hljs-title class_">AutoFocusTarget</span> = <span class="hljs-string">&apos;dialog&apos;</span> | <span class="hljs-string">&apos;first-tabbable&apos;</span> | <span class="hljs-string">&apos;first-heading&apos;</span>;\n</pre>\n<h4 id="drawerposition"><code>DrawerPosition</code></h4>\n<p>Possible overrides for a drawer&apos;s position.</p>\n<pre class="hljs"><span class="hljs-keyword">type</span> <span class="hljs-title class_">DrawerPosition</span> = <span class="hljs-string">&apos;top&apos;</span> | <span class="hljs-string">&apos;bottom&apos;</span> | <span class="hljs-string">&apos;left&apos;</span> | <span class="hljs-string">&apos;right&apos;</span>;\n</pre>\n<h3 id="constants">Constants</h3>\n<h4 id="mtx_drawer_default_options"><code>MTX_DRAWER_DEFAULT_OPTIONS</code></h4>\n<p>Injection token that can be used to specify default drawer options.</p>\n<pre class="hljs"><span class="hljs-keyword">const</span> <span class="hljs-attr">MTX_DRAWER_DEFAULT_OPTIONS</span>: <span class="hljs-title class_">InjectionToken</span>&lt;<span class="hljs-title class_">MtxDrawerConfig</span>&gt;;\n</pre>\n<h4 id="mtx_drawer_data"><code>MTX_DRAWER_DATA</code></h4>\n<p>Injection token that can be used to access the data that was passed in to a drawer.</p>\n<pre class="hljs"><span class="hljs-keyword">const</span> <span class="hljs-attr">MTX_DRAWER_DATA</span>: <span class="hljs-title class_">InjectionToken</span>&lt;<span class="hljs-built_in">any</span>&gt;;\n</pre>\n<h3 id="mtxdraweranimations"><code>mtxDrawerAnimations</code></h3>\n<p>Animations used by the Material drawer.</p>\n<pre class="hljs"><span class="hljs-keyword">const</span> <span class="hljs-attr">mtxDrawerAnimations</span>: { <span class="hljs-keyword">readonly</span> <span class="hljs-attr">drawerState</span>: <span class="hljs-title class_">AnimationTriggerMetadata</span>; };\n</pre>\n'},21659:(p,r,n)=>{"use strict";n.r(r),n.d(r,{default:()=>c});const c="import { Component, inject } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MTX_DRAWER_DATA, MtxDrawer, MtxDrawerRef } from '@ng-matero/extensions/drawer';\n\n@Component({\n  selector: 'drawer-example',\n  templateUrl: './app.component.html',\n  styleUrl: './app.component.scss',\n  imports: [FormsModule, MatFormFieldModule, MatInputModule, MatButtonModule],\n})\nexport class AppComponent {\n  private drawer = inject(MtxDrawer);\n\n  animal?: string;\n  name?: string;\n\n  open() {\n    const drawerRef = this.drawer.open(DrawerSharingDataOverviewComponent, {\n      width: '300px',\n      data: { name: this.name, animal: this.animal },\n    });\n\n    drawerRef.afterDismissed().subscribe(result => {\n      console.log('The drawer was dismissed');\n      this.animal = result;\n    });\n  }\n}\n\n@Component({\n  selector: 'drawer-overview',\n  template: `\n    <h1 class=\"heading\">\n      Hi, {{ data.name }}\n      <span class=\"flex-spacer\"></span>\n      <button mat-icon-button (click)=\"onNoClick()\">\n        <mat-icon>close</mat-icon>\n      </button>\n    </h1>\n    <div>\n      <p>What's your favorite animal?</p>\n      <mat-form-field>\n        <mat-label>Favorite Animal</mat-label>\n        <input matInput [(ngModel)]=\"data.animal\" />\n      </mat-form-field>\n    </div>\n    <div>\n      <button mat-button (click)=\"onNoClick()\">No Thanks</button>\n      <button mat-button (click)=\"onOkClick()\" cdkFocusInitial>Ok</button>\n    </div>\n  `,\n  styles: `\n    .heading {\n      display: flex;\n      align-items: center;\n    }\n\n    .flex-spacer {\n      flex-grow: 1;\n    }\n  `,\n  imports: [MatIconModule, MatFormFieldModule, MatInputModule, FormsModule, MatButtonModule],\n})\nexport class DrawerSharingDataOverviewComponent {\n  drawerRef = inject<MtxDrawerRef<DrawerSharingDataOverviewComponent>>(MtxDrawerRef);\n  data = inject(MTX_DRAWER_DATA);\n\n  onNoClick(): void {\n    this.drawerRef.dismiss();\n  }\n\n  onOkClick() {\n    this.drawerRef.dismiss(this.data.animal);\n  }\n}\n"},32144:(p,r,n)=>{"use strict";n.r(r),n.d(r,{default:()=>c});const c="/** No CSS for this example */\n"},45571:(p,r,n)=>{"use strict";n.r(r),n.d(r,{default:()=>c});const c='<ol>\n  <li>\n    <mat-form-field>\n      <mat-label>What\'s your name?</mat-label>\n      <input matInput [(ngModel)]="name" />\n    </mat-form-field>\n  </li>\n  <li>\n    <button mat-raised-button (click)="open()">Pick one</button>\n  </li>\n  @if (animal) {\n    <li>\n      You chose:\n      <i>{{ animal }}</i>\n    </li>\n  }\n</ol>\n'},46442:p=>{p.exports='<span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>Drawer configuration<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">section</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>Position:<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">mat-radio-group</span> [(<span class="hljs-attr">ngModel</span>)]=<span class="hljs-string">&quot;position&quot;</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">mat-radio-button</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;top&quot;</span>&gt;</span>Top<span class="hljs-tag">&lt;/<span class="hljs-name">mat-radio-button</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">mat-radio-button</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;right&quot;</span>&gt;</span>Right<span class="hljs-tag">&lt;/<span class="hljs-name">mat-radio-button</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">mat-radio-button</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;bottom&quot;</span>&gt;</span>Bottom<span class="hljs-tag">&lt;/<span class="hljs-name">mat-radio-button</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">mat-radio-button</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;left&quot;</span>&gt;</span>Left<span class="hljs-tag">&lt;/<span class="hljs-name">mat-radio-button</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">mat-radio-group</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">section</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">section</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">mat-form-field</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">mat-label</span>&gt;</span>Width<span class="hljs-tag">&lt;/<span class="hljs-name">mat-label</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">matInput</span> [(<span class="hljs-attr">ngModel</span>)]=<span class="hljs-string">&quot;width&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> /&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">mat-form-field</span>&gt;</span>\n\n  <span class="hljs-tag">&lt;<span class="hljs-name">mat-form-field</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">mat-label</span>&gt;</span>Height<span class="hljs-tag">&lt;/<span class="hljs-name">mat-label</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">matInput</span> [(<span class="hljs-attr">ngModel</span>)]=<span class="hljs-string">&quot;height&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> /&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">mat-form-field</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">section</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">section</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">mat-checkbox</span> [(<span class="hljs-attr">ngModel</span>)]=<span class="hljs-string">&quot;hasBackdrop&quot;</span>&gt;</span>HasBackdrop<span class="hljs-tag">&lt;/<span class="hljs-name">mat-checkbox</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">section</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">section</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">mat-checkbox</span> [(<span class="hljs-attr">ngModel</span>)]=<span class="hljs-string">&quot;disableClose&quot;</span>&gt;</span>DisableClose<span class="hljs-tag">&lt;/<span class="hljs-name">mat-checkbox</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">section</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">section</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">mat-checkbox</span> [(<span class="hljs-attr">ngModel</span>)]=<span class="hljs-string">&quot;closeOnNavigation&quot;</span>&gt;</span>CloseOnNavigation<span class="hljs-tag">&lt;/<span class="hljs-name">mat-checkbox</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">section</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>Result<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">mat-raised-button</span> <span class="hljs-attr">color</span>=<span class="hljs-string">&quot;primary&quot;</span> (<span class="hljs-attr">click</span>)=<span class="hljs-string">&quot;open()&quot;</span>&gt;</span>Open<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>\n'},60952:p=>{p.exports=""},62264:p=>{p.exports='<span class="hljs-keyword">import</span> { <span class="hljs-title class_">Component</span>, inject } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@angular/core&#x27;</span>;\n<span class="hljs-keyword">import</span> { <span class="hljs-title class_">FormsModule</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@angular/forms&#x27;</span>;\n<span class="hljs-keyword">import</span> { <span class="hljs-title class_">MatButtonModule</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@angular/material/button&#x27;</span>;\n<span class="hljs-keyword">import</span> { <span class="hljs-title class_">MatCheckboxModule</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@angular/material/checkbox&#x27;</span>;\n<span class="hljs-keyword">import</span> { <span class="hljs-title class_">MatFormFieldModule</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@angular/material/form-field&#x27;</span>;\n<span class="hljs-keyword">import</span> { <span class="hljs-title class_">MatIconModule</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@angular/material/icon&#x27;</span>;\n<span class="hljs-keyword">import</span> { <span class="hljs-title class_">MatInputModule</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@angular/material/input&#x27;</span>;\n<span class="hljs-keyword">import</span> { <span class="hljs-title class_">MatRadioModule</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@angular/material/radio&#x27;</span>;\n<span class="hljs-keyword">import</span> { <span class="hljs-title class_">DrawerPosition</span>, <span class="hljs-title class_">MtxDrawer</span>, <span class="hljs-title class_">MtxDrawerRef</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@ng-matero/extensions/drawer&#x27;</span>;\n\n<span class="hljs-meta">@Component</span>({\n  <span class="hljs-attr">selector</span>: <span class="hljs-string">&#x27;drawer-example&#x27;</span>,\n  <span class="hljs-attr">templateUrl</span>: <span class="hljs-string">&#x27;./app.component.html&#x27;</span>,\n  <span class="hljs-attr">styleUrl</span>: <span class="hljs-string">&#x27;./app.component.scss&#x27;</span>,\n  <span class="hljs-attr">imports</span>: [\n    <span class="hljs-title class_">FormsModule</span>,\n    <span class="hljs-title class_">MatRadioModule</span>,\n    <span class="hljs-title class_">MatFormFieldModule</span>,\n    <span class="hljs-title class_">MatInputModule</span>,\n    <span class="hljs-title class_">MatCheckboxModule</span>,\n    <span class="hljs-title class_">MatButtonModule</span>,\n  ],\n})\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AppComponent</span> {\n  <span class="hljs-keyword">private</span> drawer = <span class="hljs-title function_">inject</span>(<span class="hljs-title class_">MtxDrawer</span>);\n\n  <span class="hljs-attr">position</span>: <span class="hljs-title class_">DrawerPosition</span> = <span class="hljs-string">&#x27;right&#x27;</span>;\n  width = <span class="hljs-string">&#x27;300px&#x27;</span>;\n  height = <span class="hljs-string">&#x27;300px&#x27;</span>;\n  hasBackdrop = <span class="hljs-literal">true</span>;\n  disableClose = <span class="hljs-literal">false</span>;\n  closeOnNavigation = <span class="hljs-literal">true</span>;\n\n  <span class="hljs-title function_">open</span>(<span class="hljs-params"></span>) {\n    <span class="hljs-keyword">const</span> drawerRef = <span class="hljs-variable language_">this</span>.<span class="hljs-property">drawer</span>.<span class="hljs-title function_">open</span>(<span class="hljs-title class_">DrawerConfigurableOverviewComponent</span>, {\n      <span class="hljs-attr">position</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">position</span>,\n      <span class="hljs-attr">width</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">width</span>,\n      <span class="hljs-attr">height</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">height</span>,\n      <span class="hljs-attr">hasBackdrop</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">hasBackdrop</span>,\n      <span class="hljs-attr">disableClose</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">disableClose</span>,\n      <span class="hljs-attr">closeOnNavigation</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">closeOnNavigation</span>,\n      <span class="hljs-attr">data</span>: {},\n    });\n\n    drawerRef.<span class="hljs-title function_">afterDismissed</span>().<span class="hljs-title function_">subscribe</span>(<span class="hljs-function"><span class="hljs-params">result</span> =&gt;</span> {\n      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;The drawer was dismissed&#x27;</span>);\n    });\n  }\n}\n\n<span class="hljs-meta">@Component</span>({\n  <span class="hljs-attr">selector</span>: <span class="hljs-string">&#x27;drawer-overview&#x27;</span>,\n  <span class="hljs-attr">template</span>: <span class="hljs-string">`\n    &lt;h1 class=&quot;heading&quot;&gt;\n      &lt;span&gt;Title&lt;/span&gt;\n      &lt;span class=&quot;flex-spacer&quot;&gt;&lt;/span&gt;\n      &lt;button mat-icon-button (click)=&quot;onClose()&quot;&gt;\n        &lt;mat-icon&gt;close&lt;/mat-icon&gt;\n      &lt;/button&gt;\n    &lt;/h1&gt;\n    &lt;p&gt;\n      Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tiam, quis nostrud\n      exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in\n      reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.\n    &lt;/p&gt;\n  `</span>,\n  <span class="hljs-attr">styles</span>: <span class="hljs-string">`\n    .heading {\n      display: flex;\n      align-items: center;\n    }\n\n    .flex-spacer {\n      flex-grow: 1;\n    }\n  `</span>,\n  <span class="hljs-attr">imports</span>: [<span class="hljs-title class_">MatIconModule</span>, <span class="hljs-title class_">MatButtonModule</span>],\n})\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DrawerConfigurableOverviewComponent</span> {\n  <span class="hljs-keyword">private</span> drawerRef = inject&lt;<span class="hljs-title class_">MtxDrawerRef</span>&lt;<span class="hljs-title class_">DrawerConfigurableOverviewComponent</span>&gt;&gt;(<span class="hljs-title class_">MtxDrawerRef</span>);\n\n  <span class="hljs-title function_">onClose</span>(): <span class="hljs-built_in">void</span> {\n    <span class="hljs-variable language_">this</span>.<span class="hljs-property">drawerRef</span>.<span class="hljs-title function_">dismiss</span>();\n  }\n}\n'},72246:(p,r,n)=>{"use strict";n.r(r),n.d(r,{default:()=>c});const c=""},76397:(p,r,n)=>{"use strict";n.r(r),n.d(r,{default:()=>c});const c="import { Component, inject } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { DrawerPosition, MtxDrawer, MtxDrawerRef } from '@ng-matero/extensions/drawer';\n\n@Component({\n  selector: 'drawer-example',\n  templateUrl: './app.component.html',\n  styleUrl: './app.component.scss',\n  imports: [\n    FormsModule,\n    MatRadioModule,\n    MatFormFieldModule,\n    MatInputModule,\n    MatCheckboxModule,\n    MatButtonModule,\n  ],\n})\nexport class AppComponent {\n  private drawer = inject(MtxDrawer);\n\n  position: DrawerPosition = 'right';\n  width = '300px';\n  height = '300px';\n  hasBackdrop = true;\n  disableClose = false;\n  closeOnNavigation = true;\n\n  open() {\n    const drawerRef = this.drawer.open(DrawerConfigurableOverviewComponent, {\n      position: this.position,\n      width: this.width,\n      height: this.height,\n      hasBackdrop: this.hasBackdrop,\n      disableClose: this.disableClose,\n      closeOnNavigation: this.closeOnNavigation,\n      data: {},\n    });\n\n    drawerRef.afterDismissed().subscribe(result => {\n      console.log('The drawer was dismissed');\n    });\n  }\n}\n\n@Component({\n  selector: 'drawer-overview',\n  template: `\n    <h1 class=\"heading\">\n      <span>Title</span>\n      <span class=\"flex-spacer\"></span>\n      <button mat-icon-button (click)=\"onClose()\">\n        <mat-icon>close</mat-icon>\n      </button>\n    </h1>\n    <p>\n      Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tiam, quis nostrud\n      exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in\n      reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.\n    </p>\n  `,\n  styles: `\n    .heading {\n      display: flex;\n      align-items: center;\n    }\n\n    .flex-spacer {\n      flex-grow: 1;\n    }\n  `,\n  imports: [MatIconModule, MatButtonModule],\n})\nexport class DrawerConfigurableOverviewComponent {\n  private drawerRef = inject<MtxDrawerRef<DrawerConfigurableOverviewComponent>>(MtxDrawerRef);\n\n  onClose(): void {\n    this.drawerRef.dismiss();\n  }\n}\n"},83864:(p,r,n)=>{"use strict";n.r(r),n.d(r,{DrawerApiComponent:()=>I,DrawerOverviewComponent:()=>E,routes:()=>as});var c=n(60177),s=n(4020),D=n(18498),B=n(4840),S=n(91526),h=n(89417),m=n(88834),C=n(82765),g=n(53719),f=n(99213),u=n(99631),x=n(5951),y=n(14085),v=n(82529),N=n(66969),j=n(21413),W=n(59030),P=n(99172);class k{constructor(){this.data=null,this.hasBackdrop=!0,this.disableClose=!1,this.ariaLabel=null,this.closeOnNavigation=!0,this.autoFocus="first-tabbable",this.restoreFocus=!0,this.position="right"}}var _=n(76939);function H(t,d){}const T="_mtx-drawer-enter",R="_mtx-drawer-exit";let X=(()=>{class t extends v.sU{constructor(){super(...arguments),this._animationsDisabled="NoopAnimations"===(0,s.WQX)(s.bc$,{optional:!0}),this._animationState="void",this._animationStateChanged=new s.bkB,this._destroyed=!1}get _drawerPosition(){return`mtx-drawer-${this._config.position}`}_contentAttached(){super._contentAttached(),this.enter()}enter(){this._destroyed||(this._animationState="visible",this._changeDetectorRef.markForCheck(),this._changeDetectorRef.detectChanges(),this._animationsDisabled&&this._simulateAnimation(T))}exit(){this._destroyed||(this._animationState="hidden",this._changeDetectorRef.markForCheck(),this._animationsDisabled&&this._simulateAnimation(R))}ngOnDestroy(){super.ngOnDestroy(),this._destroyed=!0}_simulateAnimation(o){this._ngZone.run(()=>{this._handleAnimationEvent(!0,o),setTimeout(()=>this._handleAnimationEvent(!1,o))})}_handleAnimationEvent(o,e){const a=e===T,l=e===R;a&&this._trapFocus(),(a||l)&&this._animationStateChanged.emit({toState:a?"visible":"hidden",phase:o?"start":"done"})}_captureInitialFocus(){}static{this.\u0275fac=(()=>{let o;return function(a){return(o||(o=s.xGo(t)))(a||t)}})()}static{this.\u0275cmp=s.VBU({type:t,selectors:[["mtx-drawer-container"]],viewQuery:function(e,a){if(1&e&&s.GBs(_.I3,7),2&e){let l;s.mGM(l=s.lsd())&&(a._portalOutlet=l.first)}},hostAttrs:["tabindex","-1",1,"mtx-drawer-container"],hostVars:12,hostBindings:function(e,a){1&e&&s.bIt("animationstart",function(i){return a._handleAnimationEvent(!0,i.animationName)})("animationend",function(i){return a._handleAnimationEvent(!1,i.animationName)})("animationcancel",function(i){return a._handleAnimationEvent(!1,i.animationName)}),2&e&&(s.Mr5("id",a._config.id),s.BMQ("role",a._config.role)("aria-modal",a._config.isModal)("aria-label",a._config.ariaLabel),s.HbH(a._drawerPosition),s.AVh("mtx-drawer-container-animations-enabled",!a._animationsDisabled)("mtx-drawer-container-enter","visible"===a._animationState)("mtx-drawer-container-exit","hidden"===a._animationState))},features:[s.Vt3],decls:1,vars:0,consts:[["cdkPortalOutlet",""]],template:function(e,a){1&e&&s.DNE(0,H,0,0,"ng-template",0)},dependencies:[_.I3],styles:["@keyframes _mtx-drawer-enter{0%{box-shadow:none;visibility:hidden}to{transform:none;visibility:visible}}@keyframes _mtx-drawer-exit{0%{transform:none;visibility:visible}to{box-shadow:none;visibility:hidden}}.mtx-drawer-container{display:block;width:100%;padding:8px 16px;overflow:auto;outline:0;box-sizing:border-box;position:relative;background-color:var(--mtx-drawer-container-background-color, var(--mat-sys-surface));color:var(--mtx-drawer-container-text-color, var(--mat-sys-on-surface-variant));box-shadow:var(--mtx-drawer-container-elevation-shadow, 0px 3px 1px -2px rgba(0, 0, 0, .2), 0px 2px 2px 0px rgba(0, 0, 0, .14), 0px 1px 5px 0px rgba(0, 0, 0, .12))}@media (forced-colors: active){.mtx-drawer-container{outline:1px solid}}.mtx-drawer-container-animations-enabled.mtx-drawer-container-enter{animation:_mtx-drawer-enter .15s cubic-bezier(0,0,.2,1) forwards}.mtx-drawer-container-animations-enabled.mtx-drawer-container-exit{animation:_mtx-drawer-exit .4s cubic-bezier(.25,.8,.25,1) backwards}.mtx-drawer-container-animations-enabled.mtx-drawer-right{transform:translate(100%)}.mtx-drawer-container-animations-enabled.mtx-drawer-left{transform:translate(-100%)}.mtx-drawer-container-animations-enabled.mtx-drawer-bottom{transform:translateY(100%)}.mtx-drawer-container-animations-enabled.mtx-drawer-top{transform:translateY(-100%)}.mtx-drawer-right{border-top-left-radius:var(--mtx-drawer-container-shape, var(--mat-sys-corner-large));border-bottom-left-radius:var(--mtx-drawer-container-shape, var(--mat-sys-corner-large))}.mtx-drawer-left{border-top-right-radius:var(--mtx-drawer-container-shape, var(--mat-sys-corner-large));border-bottom-right-radius:var(--mtx-drawer-container-shape, var(--mat-sys-corner-large))}.mtx-drawer-bottom{border-top-left-radius:var(--mtx-drawer-container-shape, var(--mat-sys-corner-large));border-top-right-radius:var(--mtx-drawer-container-shape, var(--mat-sys-corner-large))}.mtx-drawer-top{border-bottom-left-radius:var(--mtx-drawer-container-shape, var(--mat-sys-corner-large));border-bottom-right-radius:var(--mtx-drawer-container-shape, var(--mat-sys-corner-large))}\n"],encapsulation:2})}}return t})();var F=n(67336),L=n(57786),w=n(5964),M=n(96697);class b{get instance(){return this._ref.componentInstance}get componentRef(){return this._ref.componentRef}constructor(d,o,e){this._ref=d,this._afterDismissed=new j.B,this._afterOpened=new j.B,this.containerInstance=e,this.disableClose=o.disableClose,this.id=d.id,e._animationStateChanged.pipe((0,w.p)(a=>"done"===a.phase&&"visible"===a.toState),(0,M.s)(1)).subscribe(()=>{this._afterOpened.next(),this._afterOpened.complete()}),e._animationStateChanged.pipe((0,w.p)(a=>"done"===a.phase&&"hidden"===a.toState),(0,M.s)(1)).subscribe(()=>{clearTimeout(this._closeFallbackTimeout),this._ref.close(this._result)}),d.overlayRef.detachments().subscribe(()=>{this._ref.close(this._result)}),(0,L.h)(this.backdropClick(),this.keydownEvents().pipe((0,w.p)(a=>a.keyCode===F._f))).subscribe(a=>{!this.disableClose&&("keydown"!==a.type||!(0,F.rp)(a))&&(a.preventDefault(),this.dismiss())})}dismiss(d){this.containerInstance&&!this._afterDismissed.closed&&(this.containerInstance._animationStateChanged.pipe((0,w.p)(o=>"start"===o.phase),(0,M.s)(1)).subscribe(o=>{this._closeFallbackTimeout=setTimeout(()=>this._ref.close(this._result),500),this._ref.overlayRef.detachBackdrop()}),this._result=d,this.containerInstance.exit(),this.containerInstance=null)}afterDismissed(){return this._ref.closed}afterOpened(){return this._afterOpened}backdropClick(){return this._ref.backdropClick}keydownEvents(){return this._ref.keydownEvents}}const A=new s.nKC("MtxDrawerData"),U=new s.nKC("mtx-drawer-default-options");let q=0,O=(()=>{class t{constructor(){this._overlay=(0,s.WQX)(N.hJ),this._parentDrawer=(0,s.WQX)(t,{optional:!0,skipSelf:!0}),this._defaultOptions=(0,s.WQX)(U,{optional:!0}),this._openDrawersAtThisLevel=[],this._afterAllDismissedAtThisLevel=new j.B,this._afterOpenedAtThisLevel=new j.B,this._dialog=(0,s.WQX)(v.lG),this.afterAllDismissed=(0,W.v)(()=>this.openDrawers.length?this._getAfterAllDismissed():this._getAfterAllDismissed().pipe((0,P.Z)(void 0)))}get openDrawers(){return this._parentDrawer?this._parentDrawer.openDrawers:this._openDrawersAtThisLevel}get afterOpened(){return this._parentDrawer?this._parentDrawer.afterOpened:this._afterOpenedAtThisLevel}_getAfterAllDismissed(){const o=this._parentDrawer;return o?o._getAfterAllDismissed():this._afterAllDismissedAtThisLevel}open(o,e){let a;const l={...this._defaultOptions||new k,...e};return l.id=l.id||"mtx-drawer-"+q++,l.width="left"===l.position||"right"===l.position?(0,y.a1)(l.width):"100vw",l.height="top"===l.position||"bottom"===l.position?(0,y.a1)(l.height):"100vh",this._dialog.open(o,{...l,disableClose:!0,closeOnOverlayDetachments:!1,container:{type:X,providers:()=>[{provide:k,useValue:l},{provide:v.Pe,useValue:l}]},scrollStrategy:l.scrollStrategy||this._overlay.scrollStrategies.block(),positionStrategy:this._overlay.position().global()[l.position]("0"),templateContext:()=>({drawerRef:a}),providers:(i,ts,ns)=>(a=new b(i,l,ns),[{provide:b,useValue:a},{provide:A,useValue:l.data}])}),this.openDrawers.push(a),this.afterOpened.next(a),a.afterDismissed().subscribe(()=>{const i=this.openDrawers.indexOf(a);i>-1&&(this.openDrawers.splice(i,1),this.openDrawers.length||this._getAfterAllDismissed().next())}),a}dismissAll(){this._dismissDrawers(this.openDrawers)}getDrawerById(o){return this.openDrawers.find(e=>e.id===o)}ngOnDestroy(){this._dismissDrawers(this._openDrawersAtThisLevel),this._afterAllDismissedAtThisLevel.complete(),this._afterOpenedAtThisLevel.complete()}_dismissDrawers(o){let e=o.length;for(;e--;)o[e].dismiss()}static{this.\u0275fac=function(e){return new(e||t)}}static{this.\u0275prov=s.jDH({token:t,factory:t.\u0275fac,providedIn:"root"})}}return t})(),V=(()=>{class t{constructor(){this.drawer=(0,s.WQX)(O),this.position="right",this.width="300px",this.height="300px",this.hasBackdrop=!0,this.disableClose=!1,this.closeOnNavigation=!0}open(){this.drawer.open(Q,{position:this.position,width:this.width,height:this.height,hasBackdrop:this.hasBackdrop,disableClose:this.disableClose,closeOnNavigation:this.closeOnNavigation,data:{}}).afterDismissed().subscribe(e=>{console.log("The drawer was dismissed")})}static{this.\u0275fac=function(e){return new(e||t)}}static{this.\u0275cmp=s.VBU({type:t,selectors:[["drawer-example"]],decls:36,vars:6,consts:[["for",""],[3,"ngModelChange","ngModel"],["value","top"],["value","right"],["value","bottom"],["value","left"],["matInput","","type","text",3,"ngModelChange","ngModel"],["mat-raised-button","","color","primary",3,"click"]],template:function(e,a){1&e&&(s.j41(0,"h2"),s.EFF(1,"Drawer configuration"),s.k0s(),s.j41(2,"section")(3,"label",0),s.EFF(4,"Position:"),s.k0s(),s.j41(5,"mat-radio-group",1),s.mxI("ngModelChange",function(i){return s.DH7(a.position,i)||(a.position=i),i}),s.j41(6,"mat-radio-button",2),s.EFF(7,"Top"),s.k0s(),s.j41(8,"mat-radio-button",3),s.EFF(9,"Right"),s.k0s(),s.j41(10,"mat-radio-button",4),s.EFF(11,"Bottom"),s.k0s(),s.j41(12,"mat-radio-button",5),s.EFF(13,"Left"),s.k0s()()(),s.j41(14,"section")(15,"mat-form-field")(16,"mat-label"),s.EFF(17,"Width"),s.k0s(),s.j41(18,"input",6),s.mxI("ngModelChange",function(i){return s.DH7(a.width,i)||(a.width=i),i}),s.k0s()(),s.j41(19,"mat-form-field")(20,"mat-label"),s.EFF(21,"Height"),s.k0s(),s.j41(22,"input",6),s.mxI("ngModelChange",function(i){return s.DH7(a.height,i)||(a.height=i),i}),s.k0s()()(),s.j41(23,"section")(24,"mat-checkbox",1),s.mxI("ngModelChange",function(i){return s.DH7(a.hasBackdrop,i)||(a.hasBackdrop=i),i}),s.EFF(25,"HasBackdrop"),s.k0s()(),s.j41(26,"section")(27,"mat-checkbox",1),s.mxI("ngModelChange",function(i){return s.DH7(a.disableClose,i)||(a.disableClose=i),i}),s.EFF(28,"DisableClose"),s.k0s()(),s.j41(29,"section")(30,"mat-checkbox",1),s.mxI("ngModelChange",function(i){return s.DH7(a.closeOnNavigation,i)||(a.closeOnNavigation=i),i}),s.EFF(31,"CloseOnNavigation"),s.k0s()(),s.j41(32,"h2"),s.EFF(33,"Result"),s.k0s(),s.j41(34,"button",7),s.bIt("click",function(){return a.open()}),s.EFF(35,"Open"),s.k0s()),2&e&&(s.R7$(5),s.R50("ngModel",a.position),s.R7$(13),s.R50("ngModel",a.width),s.R7$(4),s.R50("ngModel",a.height),s.R7$(2),s.R50("ngModel",a.hasBackdrop),s.R7$(3),s.R50("ngModel",a.disableClose),s.R7$(3),s.R50("ngModel",a.closeOnNavigation))},dependencies:[h.YN,h.me,h.BC,h.vS,x.Wk,x.VT,x._g,g.RG,g.rl,g.nJ,u.fS,u.fg,C.g7,C.So,m.Hl,m.$z],encapsulation:2})}}return t})(),Q=(()=>{class t{constructor(){this.drawerRef=(0,s.WQX)(b)}onClose(){this.drawerRef.dismiss()}static{this.\u0275fac=function(e){return new(e||t)}}static{this.\u0275cmp=s.VBU({type:t,selectors:[["drawer-overview"]],decls:9,vars:0,consts:[[1,"heading"],[1,"flex-spacer"],["mat-icon-button","",3,"click"]],template:function(e,a){1&e&&(s.j41(0,"h1",0)(1,"span"),s.EFF(2,"Title"),s.k0s(),s.nrm(3,"span",1),s.j41(4,"button",2),s.bIt("click",function(){return a.onClose()}),s.j41(5,"mat-icon"),s.EFF(6,"close"),s.k0s()()(),s.j41(7,"p"),s.EFF(8," Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tiam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. "),s.k0s())},dependencies:[f.m_,f.An,m.Hl,m.iY],styles:[".heading[_ngcontent-%COMP%]{display:flex;align-items:center}.flex-spacer[_ngcontent-%COMP%]{flex-grow:1}"]})}}return t})();const Y={title:"Configurable drawer",component:V,files:[{file:"app.component.html",content:n(46442),filecontent:n(98177)},{file:"app.component.ts",content:n(62264),filecontent:n(76397)},{file:"app.component.scss",content:n(60952),filecontent:n(72246)}]};function G(t,d){if(1&t&&(s.j41(0,"li"),s.EFF(1," You chose: "),s.j41(2,"i"),s.EFF(3),s.k0s()()),2&t){const o=s.XpG();s.R7$(3),s.JRh(o.animal)}}let K=(()=>{class t{constructor(){this.drawer=(0,s.WQX)(O)}open(){this.drawer.open(z,{width:"300px",data:{name:this.name,animal:this.animal}}).afterDismissed().subscribe(e=>{console.log("The drawer was dismissed"),this.animal=e})}static{this.\u0275fac=function(e){return new(e||t)}}static{this.\u0275cmp=s.VBU({type:t,selectors:[["drawer-example"]],decls:10,vars:2,consts:[["matInput","",3,"ngModelChange","ngModel"],["mat-raised-button","",3,"click"]],template:function(e,a){1&e&&(s.j41(0,"ol")(1,"li")(2,"mat-form-field")(3,"mat-label"),s.EFF(4,"What's your name?"),s.k0s(),s.j41(5,"input",0),s.mxI("ngModelChange",function(i){return s.DH7(a.name,i)||(a.name=i),i}),s.k0s()()(),s.j41(6,"li")(7,"button",1),s.bIt("click",function(){return a.open()}),s.EFF(8,"Pick one"),s.k0s()(),s.DNE(9,G,4,1,"li"),s.k0s()),2&e&&(s.R7$(5),s.R50("ngModel",a.name),s.R7$(4),s.vxM(a.animal?9:-1))},dependencies:[h.YN,h.me,h.BC,h.vS,g.RG,g.rl,g.nJ,u.fS,u.fg,m.Hl,m.$z],encapsulation:2})}}return t})(),z=(()=>{class t{constructor(){this.drawerRef=(0,s.WQX)(b),this.data=(0,s.WQX)(A)}onNoClick(){this.drawerRef.dismiss()}onOkClick(){this.drawerRef.dismiss(this.data.animal)}static{this.\u0275fac=function(e){return new(e||t)}}static{this.\u0275cmp=s.VBU({type:t,selectors:[["drawer-overview"]],decls:18,vars:2,consts:[[1,"heading"],[1,"flex-spacer"],["mat-icon-button","",3,"click"],["matInput","",3,"ngModelChange","ngModel"],["mat-button","",3,"click"],["mat-button","","cdkFocusInitial","",3,"click"]],template:function(e,a){1&e&&(s.j41(0,"h1",0),s.EFF(1),s.nrm(2,"span",1),s.j41(3,"button",2),s.bIt("click",function(){return a.onNoClick()}),s.j41(4,"mat-icon"),s.EFF(5,"close"),s.k0s()()(),s.j41(6,"div")(7,"p"),s.EFF(8,"What's your favorite animal?"),s.k0s(),s.j41(9,"mat-form-field")(10,"mat-label"),s.EFF(11,"Favorite Animal"),s.k0s(),s.j41(12,"input",3),s.mxI("ngModelChange",function(i){return s.DH7(a.data.animal,i)||(a.data.animal=i),i}),s.k0s()()(),s.j41(13,"div")(14,"button",4),s.bIt("click",function(){return a.onNoClick()}),s.EFF(15,"No Thanks"),s.k0s(),s.j41(16,"button",5),s.bIt("click",function(){return a.onOkClick()}),s.EFF(17,"Ok"),s.k0s()()),2&e&&(s.R7$(),s.SpI(" Hi, ",a.data.name," "),s.R7$(11),s.R50("ngModel",a.data.animal))},dependencies:[f.m_,f.An,g.RG,g.rl,g.nJ,u.fS,u.fg,h.YN,h.me,h.BC,h.vS,m.Hl,m.$z,m.iY],styles:[".heading[_ngcontent-%COMP%]{display:flex;align-items:center}.flex-spacer[_ngcontent-%COMP%]{flex-grow:1}"]})}}return t})();const J={title:"Sharing data",component:K,files:[{file:"app.component.html",content:n(99060),filecontent:n(45571)},{file:"app.component.ts",content:n(91642),filecontent:n(21659)},{file:"app.component.scss",content:n(4318),filecontent:n(32144)}]};function Z(t,d){1&t&&s.nrm(0,"example-viewer",0),2&t&&s.Y8G("exampleData",d.$implicit)}function $(t,d){1&t&&s.Z7z(0,Z,1,1,"example-viewer",0,s.fX1),2&t&&s.Dyx(d.examples)}function ss(t,d){1&t&&s.nrm(0,"doc-viewer",0),2&t&&s.Y8G("textContent",d.content.default)}let E=(()=>{class t{constructor(){this.route=(0,s.WQX)(D.nX)}static{this.\u0275fac=function(e){return new(e||t)}}static{this.\u0275cmp=s.VBU({type:t,selectors:[["app-drawer-overview"]],decls:2,vars:3,consts:[[3,"exampleData"]],template:function(e,a){if(1&e&&(s.DNE(0,$,2,0),s.nI1(1,"async")),2&e){let l;s.vxM((l=s.bMT(1,1,a.route.data))?0:-1,l)}},dependencies:[S.v,c.Jj],encapsulation:2})}}return t})(),I=(()=>{class t{constructor(){this.route=(0,s.WQX)(D.nX)}static{this.\u0275fac=function(e){return new(e||t)}}static{this.\u0275cmp=s.VBU({type:t,selectors:[["app-drawer-api"]],decls:2,vars:3,consts:[[3,"textContent"]],template:function(e,a){if(1&e&&(s.DNE(0,ss,1,1,"doc-viewer",0),s.nI1(1,"async")),2&e){let l;s.vxM((l=s.bMT(1,1,a.route.data))?0:-1,l)}},dependencies:[B.T,c.Jj],encapsulation:2})}}return t})();const as=[{path:"",redirectTo:"overview",pathMatch:"full"},{path:"overview",component:E,pathMatch:"full",data:{examples:[Y,J]}},{path:"api",component:I,pathMatch:"full",data:{content:n(14236)}},{path:"**",redirectTo:"overview"}]},91642:p=>{p.exports='<span class="hljs-keyword">import</span> { <span class="hljs-title class_">Component</span>, inject } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@angular/core&#x27;</span>;\n<span class="hljs-keyword">import</span> { <span class="hljs-title class_">FormsModule</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@angular/forms&#x27;</span>;\n<span class="hljs-keyword">import</span> { <span class="hljs-title class_">MatButtonModule</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@angular/material/button&#x27;</span>;\n<span class="hljs-keyword">import</span> { <span class="hljs-title class_">MatFormFieldModule</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@angular/material/form-field&#x27;</span>;\n<span class="hljs-keyword">import</span> { <span class="hljs-title class_">MatIconModule</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@angular/material/icon&#x27;</span>;\n<span class="hljs-keyword">import</span> { <span class="hljs-title class_">MatInputModule</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@angular/material/input&#x27;</span>;\n<span class="hljs-keyword">import</span> { <span class="hljs-variable constant_">MTX_DRAWER_DATA</span>, <span class="hljs-title class_">MtxDrawer</span>, <span class="hljs-title class_">MtxDrawerRef</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@ng-matero/extensions/drawer&#x27;</span>;\n\n<span class="hljs-meta">@Component</span>({\n  <span class="hljs-attr">selector</span>: <span class="hljs-string">&#x27;drawer-example&#x27;</span>,\n  <span class="hljs-attr">templateUrl</span>: <span class="hljs-string">&#x27;./app.component.html&#x27;</span>,\n  <span class="hljs-attr">styleUrl</span>: <span class="hljs-string">&#x27;./app.component.scss&#x27;</span>,\n  <span class="hljs-attr">imports</span>: [<span class="hljs-title class_">FormsModule</span>, <span class="hljs-title class_">MatFormFieldModule</span>, <span class="hljs-title class_">MatInputModule</span>, <span class="hljs-title class_">MatButtonModule</span>],\n})\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AppComponent</span> {\n  <span class="hljs-keyword">private</span> drawer = <span class="hljs-title function_">inject</span>(<span class="hljs-title class_">MtxDrawer</span>);\n\n  <span class="hljs-attr">animal</span>?: <span class="hljs-built_in">string</span>;\n  <span class="hljs-attr">name</span>?: <span class="hljs-built_in">string</span>;\n\n  <span class="hljs-title function_">open</span>(<span class="hljs-params"></span>) {\n    <span class="hljs-keyword">const</span> drawerRef = <span class="hljs-variable language_">this</span>.<span class="hljs-property">drawer</span>.<span class="hljs-title function_">open</span>(<span class="hljs-title class_">DrawerSharingDataOverviewComponent</span>, {\n      <span class="hljs-attr">width</span>: <span class="hljs-string">&#x27;300px&#x27;</span>,\n      <span class="hljs-attr">data</span>: { <span class="hljs-attr">name</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>, <span class="hljs-attr">animal</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">animal</span> },\n    });\n\n    drawerRef.<span class="hljs-title function_">afterDismissed</span>().<span class="hljs-title function_">subscribe</span>(<span class="hljs-function"><span class="hljs-params">result</span> =&gt;</span> {\n      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;The drawer was dismissed&#x27;</span>);\n      <span class="hljs-variable language_">this</span>.<span class="hljs-property">animal</span> = result;\n    });\n  }\n}\n\n<span class="hljs-meta">@Component</span>({\n  <span class="hljs-attr">selector</span>: <span class="hljs-string">&#x27;drawer-overview&#x27;</span>,\n  <span class="hljs-attr">template</span>: <span class="hljs-string">`\n    &lt;h1 class=&quot;heading&quot;&gt;\n      Hi, {{ data.name }}\n      &lt;span class=&quot;flex-spacer&quot;&gt;&lt;/span&gt;\n      &lt;button mat-icon-button (click)=&quot;onNoClick()&quot;&gt;\n        &lt;mat-icon&gt;close&lt;/mat-icon&gt;\n      &lt;/button&gt;\n    &lt;/h1&gt;\n    &lt;div&gt;\n      &lt;p&gt;What&#x27;s your favorite animal?&lt;/p&gt;\n      &lt;mat-form-field&gt;\n        &lt;mat-label&gt;Favorite Animal&lt;/mat-label&gt;\n        &lt;input matInput [(ngModel)]=&quot;data.animal&quot; /&gt;\n      &lt;/mat-form-field&gt;\n    &lt;/div&gt;\n    &lt;div&gt;\n      &lt;button mat-button (click)=&quot;onNoClick()&quot;&gt;No Thanks&lt;/button&gt;\n      &lt;button mat-button (click)=&quot;onOkClick()&quot; cdkFocusInitial&gt;Ok&lt;/button&gt;\n    &lt;/div&gt;\n  `</span>,\n  <span class="hljs-attr">styles</span>: <span class="hljs-string">`\n    .heading {\n      display: flex;\n      align-items: center;\n    }\n\n    .flex-spacer {\n      flex-grow: 1;\n    }\n  `</span>,\n  <span class="hljs-attr">imports</span>: [<span class="hljs-title class_">MatIconModule</span>, <span class="hljs-title class_">MatFormFieldModule</span>, <span class="hljs-title class_">MatInputModule</span>, <span class="hljs-title class_">FormsModule</span>, <span class="hljs-title class_">MatButtonModule</span>],\n})\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DrawerSharingDataOverviewComponent</span> {\n  drawerRef = inject&lt;<span class="hljs-title class_">MtxDrawerRef</span>&lt;<span class="hljs-title class_">DrawerSharingDataOverviewComponent</span>&gt;&gt;(<span class="hljs-title class_">MtxDrawerRef</span>);\n  data = <span class="hljs-title function_">inject</span>(<span class="hljs-variable constant_">MTX_DRAWER_DATA</span>);\n\n  <span class="hljs-title function_">onNoClick</span>(): <span class="hljs-built_in">void</span> {\n    <span class="hljs-variable language_">this</span>.<span class="hljs-property">drawerRef</span>.<span class="hljs-title function_">dismiss</span>();\n  }\n\n  <span class="hljs-title function_">onOkClick</span>(<span class="hljs-params"></span>) {\n    <span class="hljs-variable language_">this</span>.<span class="hljs-property">drawerRef</span>.<span class="hljs-title function_">dismiss</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">data</span>.<span class="hljs-property">animal</span>);\n  }\n}\n'},98177:(p,r,n)=>{"use strict";n.r(r),n.d(r,{default:()=>c});const c='<h2>Drawer configuration</h2>\n\n<section>\n  <label for="">Position:</label>\n  <mat-radio-group [(ngModel)]="position">\n    <mat-radio-button value="top">Top</mat-radio-button>\n    <mat-radio-button value="right">Right</mat-radio-button>\n    <mat-radio-button value="bottom">Bottom</mat-radio-button>\n    <mat-radio-button value="left">Left</mat-radio-button>\n  </mat-radio-group>\n</section>\n\n<section>\n  <mat-form-field>\n    <mat-label>Width</mat-label>\n    <input matInput [(ngModel)]="width" type="text" />\n  </mat-form-field>\n\n  <mat-form-field>\n    <mat-label>Height</mat-label>\n    <input matInput [(ngModel)]="height" type="text" />\n  </mat-form-field>\n</section>\n\n<section>\n  <mat-checkbox [(ngModel)]="hasBackdrop">HasBackdrop</mat-checkbox>\n</section>\n\n<section>\n  <mat-checkbox [(ngModel)]="disableClose">DisableClose</mat-checkbox>\n</section>\n\n<section>\n  <mat-checkbox [(ngModel)]="closeOnNavigation">CloseOnNavigation</mat-checkbox>\n</section>\n\n<h2>Result</h2>\n\n<button mat-raised-button color="primary" (click)="open()">Open</button>\n'},99060:p=>{p.exports='<span class="hljs-tag">&lt;<span class="hljs-name">ol</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">mat-form-field</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">mat-label</span>&gt;</span>What&#x27;s your name?<span class="hljs-tag">&lt;/<span class="hljs-name">mat-label</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">matInput</span> [(<span class="hljs-attr">ngModel</span>)]=<span class="hljs-string">&quot;name&quot;</span> /&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">mat-form-field</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">mat-raised-button</span> (<span class="hljs-attr">click</span>)=<span class="hljs-string">&quot;open()&quot;</span>&gt;</span>Pick one<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>\n  @if (animal) {\n    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>\n      You chose:\n      <span class="hljs-tag">&lt;<span class="hljs-name">i</span>&gt;</span>{{ animal }}<span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>\n  }\n<span class="hljs-tag">&lt;/<span class="hljs-name">ol</span>&gt;</span>\n'}}]);