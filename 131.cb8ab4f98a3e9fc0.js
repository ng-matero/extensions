(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[131],{8523:l=>{l.exports='<span class="hljs-keyword">import</span> { <span class="hljs-title class_">Component</span>, inject } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@angular/core&#x27;</span>;\n<span class="hljs-keyword">import</span> { <span class="hljs-title class_">MatButtonModule</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@angular/material/button&#x27;</span>;\n<span class="hljs-keyword">import</span> { <span class="hljs-title class_">MtxDialog</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@ng-matero/extensions/dialog&#x27;</span>;\n\n<span class="hljs-meta">@Component</span>({\n  <span class="hljs-attr">selector</span>: <span class="hljs-string">&#x27;dialog-basic-example&#x27;</span>,\n  <span class="hljs-attr">templateUrl</span>: <span class="hljs-string">&#x27;./app.html&#x27;</span>,\n  <span class="hljs-attr">styleUrl</span>: <span class="hljs-string">&#x27;./app.scss&#x27;</span>,\n  <span class="hljs-attr">imports</span>: [<span class="hljs-title class_">MatButtonModule</span>],\n})\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> {\n  <span class="hljs-keyword">private</span> mtxDialog = <span class="hljs-title function_">inject</span>(<span class="hljs-title class_">MtxDialog</span>);\n\n  <span class="hljs-title function_">alert</span>(<span class="hljs-params"></span>) {\n    <span class="hljs-variable language_">this</span>.<span class="hljs-property">mtxDialog</span>.<span class="hljs-title function_">alert</span>(<span class="hljs-string">`My name is Zongbin!`</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-function">() =&gt;</span> {\n      <span class="hljs-variable language_">this</span>.<span class="hljs-property">mtxDialog</span>.<span class="hljs-title function_">alert</span>(<span class="hljs-string">`Glad to meet you!`</span>);\n    });\n  }\n\n  <span class="hljs-title function_">confirm</span>(<span class="hljs-params"></span>) {\n    <span class="hljs-variable language_">this</span>.<span class="hljs-property">mtxDialog</span>.<span class="hljs-title function_">confirm</span>(\n      <span class="hljs-string">`What&#x27;s your name?`</span>,\n      <span class="hljs-string">&#x27;&#x27;</span>,\n      <span class="hljs-function">() =&gt;</span> {\n        <span class="hljs-variable language_">this</span>.<span class="hljs-property">mtxDialog</span>.<span class="hljs-title function_">alert</span>(<span class="hljs-string">`Hi, Zongbin!`</span>);\n      },\n      <span class="hljs-function">() =&gt;</span> {\n        <span class="hljs-variable language_">this</span>.<span class="hljs-property">mtxDialog</span>.<span class="hljs-title function_">alert</span>(<span class="hljs-string">`I don&#x27;t know.`</span>);\n      }\n    );\n  }\n\n  <span class="hljs-title function_">open</span>(<span class="hljs-params"></span>) {\n    <span class="hljs-variable language_">this</span>.<span class="hljs-property">mtxDialog</span>.<span class="hljs-title function_">open</span>({\n      <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;This is the title&#x27;</span>,\n      <span class="hljs-attr">description</span>: <span class="hljs-string">&#x27;You can write some messages here.&#x27;</span>,\n      <span class="hljs-attr">showCloseIcon</span>: <span class="hljs-literal">true</span>,\n      <span class="hljs-attr">buttons</span>: [\n        {\n          <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;CLOSE&#x27;</span>,\n          <span class="hljs-attr">onClick</span>: <span class="hljs-function">() =&gt;</span> {\n            <span class="hljs-variable language_">this</span>.<span class="hljs-property">mtxDialog</span>.<span class="hljs-title function_">alert</span>(<span class="hljs-string">`You click Close button.`</span>);\n          },\n        },\n        {\n          <span class="hljs-attr">color</span>: <span class="hljs-string">&#x27;primary&#x27;</span>,\n          <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;VIEW&#x27;</span>,\n          <span class="hljs-attr">onClick</span>: <span class="hljs-function">() =&gt;</span> {\n            <span class="hljs-variable language_">this</span>.<span class="hljs-property">mtxDialog</span>.<span class="hljs-title function_">alert</span>(<span class="hljs-string">`You click View button.`</span>);\n          },\n        },\n        {\n          <span class="hljs-attr">color</span>: <span class="hljs-string">&#x27;warn&#x27;</span>,\n          <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;OK&#x27;</span>,\n          <span class="hljs-attr">focusInitial</span>: <span class="hljs-literal">true</span>,\n          <span class="hljs-attr">onClick</span>: <span class="hljs-function">() =&gt;</span> {\n            <span class="hljs-variable language_">this</span>.<span class="hljs-property">mtxDialog</span>.<span class="hljs-title function_">alert</span>(<span class="hljs-string">`You click Ok button.`</span>);\n          },\n        },\n      ],\n    });\n  }\n}\n'},17053:(l,n,a)=>{"use strict";a.r(n),a.d(n,{default:()=>e});const e='{\n  "title": "\u8fd9\u662f\u6807\u9898",\n  "description": "\u53ef\u4ee5\u5728\u8fd9\u91cc\u5199\u4e00\u4e9b\u8be6\u7ec6\u4fe1\u606f",\n  "close": "\u5173\u95ed",\n  "ok": "\u786e\u5b9a",\n  "view": "\u67e5\u770b"\n}\n'},21815:(l,n,a)=>{"use strict";a.r(n),a.d(n,{default:()=>e});const e='<button mat-raised-button (click)="openOriginal()">Open Original Dialog</button>\n\n@if (animal) {\n  <div>\n    You chose:\n    <strong>{{ animal }}</strong>\n  </div>\n}\n'},32492:l=>{l.exports='<span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">mat-raised-button</span> (<span class="hljs-attr">click</span>)=<span class="hljs-string">&quot;openOriginal()&quot;</span>&gt;</span>Open Original Dialog<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>\n\n@if (animal) {\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n    You chose:\n    <span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span>{{ animal }}<span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n}\n'},32671:(l,n,a)=>{"use strict";a.r(n),a.d(n,{default:()=>e});const e=".mat-mdc-button-base {\n  margin: 0 .5em;\n}\n"},34677:l=>{l.exports='<span class="hljs-selector-class">.mat-mdc-button-base</span> {\n  <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> .<span class="hljs-number">5em</span>;\n}\n'},35232:(l,n,a)=>{"use strict";a.r(n),a.d(n,{default:()=>e});const e="import { Component, inject } from '@angular/core';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MtxDialog } from '@ng-matero/extensions/dialog';\n\n@Component({\n  selector: 'dialog-basic-example',\n  templateUrl: './app.html',\n  styleUrl: './app.scss',\n  imports: [MatButtonModule],\n})\nexport class App {\n  private mtxDialog = inject(MtxDialog);\n\n  alert() {\n    this.mtxDialog.alert(`My name is Zongbin!`, '', () => {\n      this.mtxDialog.alert(`Glad to meet you!`);\n    });\n  }\n\n  confirm() {\n    this.mtxDialog.confirm(\n      `What's your name?`,\n      '',\n      () => {\n        this.mtxDialog.alert(`Hi, Zongbin!`);\n      },\n      () => {\n        this.mtxDialog.alert(`I don't know.`);\n      }\n    );\n  }\n\n  open() {\n    this.mtxDialog.open({\n      title: 'This is the title',\n      description: 'You can write some messages here.',\n      showCloseIcon: true,\n      buttons: [\n        {\n          text: 'CLOSE',\n          onClick: () => {\n            this.mtxDialog.alert(`You click Close button.`);\n          },\n        },\n        {\n          color: 'primary',\n          text: 'VIEW',\n          onClick: () => {\n            this.mtxDialog.alert(`You click View button.`);\n          },\n        },\n        {\n          color: 'warn',\n          text: 'OK',\n          focusInitial: true,\n          onClick: () => {\n            this.mtxDialog.alert(`You click Ok button.`);\n          },\n        },\n      ],\n    });\n  }\n}\n"},39461:l=>{l.exports='<span class="hljs-keyword">import</span> { <span class="hljs-title class_">Component</span>, inject } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@angular/core&#x27;</span>;\n<span class="hljs-keyword">import</span> { <span class="hljs-title class_">FormsModule</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@angular/forms&#x27;</span>;\n<span class="hljs-keyword">import</span> { <span class="hljs-title class_">MatButtonModule</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@angular/material/button&#x27;</span>;\n<span class="hljs-keyword">import</span> { <span class="hljs-title class_">MatRadioModule</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@angular/material/radio&#x27;</span>;\n<span class="hljs-keyword">import</span> { <span class="hljs-title class_">MtxDialog</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@ng-matero/extensions/dialog&#x27;</span>;\n<span class="hljs-keyword">import</span> { <span class="hljs-title class_">TranslateService</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@ngx-translate/core&#x27;</span>;\n\n<span class="hljs-meta">@Component</span>({\n  <span class="hljs-attr">selector</span>: <span class="hljs-string">&#x27;dialog-i18n-example&#x27;</span>,\n  <span class="hljs-attr">templateUrl</span>: <span class="hljs-string">&#x27;./app.html&#x27;</span>,\n  <span class="hljs-attr">styleUrl</span>: <span class="hljs-string">&#x27;./app.scss&#x27;</span>,\n  <span class="hljs-attr">imports</span>: [<span class="hljs-title class_">FormsModule</span>, <span class="hljs-title class_">MatRadioModule</span>, <span class="hljs-title class_">MatButtonModule</span>],\n})\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> {\n  <span class="hljs-keyword">private</span> mtxDialog = <span class="hljs-title function_">inject</span>(<span class="hljs-title class_">MtxDialog</span>);\n  translate = <span class="hljs-title function_">inject</span>(<span class="hljs-title class_">TranslateService</span>);\n\n  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) {\n    <span class="hljs-variable language_">this</span>.<span class="hljs-property">translate</span>.<span class="hljs-title function_">addLangs</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">langs</span>.<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> item.<span class="hljs-property">value</span>));\n    <span class="hljs-variable language_">this</span>.<span class="hljs-property">translate</span>.<span class="hljs-title function_">setDefaultLang</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">defaultlang</span>);\n  }\n\n  <span class="hljs-title function_">open</span>(<span class="hljs-params"></span>) {\n    <span class="hljs-variable language_">this</span>.<span class="hljs-property">mtxDialog</span>.<span class="hljs-title function_">open</span>({\n      <span class="hljs-attr">title</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">translate</span>.<span class="hljs-title function_">stream</span>(<span class="hljs-string">&#x27;title&#x27;</span>),\n      <span class="hljs-attr">description</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">translate</span>.<span class="hljs-title function_">stream</span>(<span class="hljs-string">&#x27;description&#x27;</span>),\n      <span class="hljs-attr">buttons</span>: [\n        {\n          <span class="hljs-attr">text</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">translate</span>.<span class="hljs-title function_">stream</span>(<span class="hljs-string">&#x27;close&#x27;</span>),\n          <span class="hljs-attr">onClick</span>: <span class="hljs-function">() =&gt;</span> {},\n        },\n        {\n          <span class="hljs-attr">color</span>: <span class="hljs-string">&#x27;primary&#x27;</span>,\n          <span class="hljs-attr">text</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">translate</span>.<span class="hljs-title function_">stream</span>(<span class="hljs-string">&#x27;view&#x27;</span>),\n          <span class="hljs-attr">onClick</span>: <span class="hljs-function">() =&gt;</span> {},\n        },\n        {\n          <span class="hljs-attr">color</span>: <span class="hljs-string">&#x27;warn&#x27;</span>,\n          <span class="hljs-attr">focusInitial</span>: <span class="hljs-literal">true</span>,\n          <span class="hljs-attr">text</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">translate</span>.<span class="hljs-title function_">stream</span>(<span class="hljs-string">&#x27;ok&#x27;</span>),\n          <span class="hljs-attr">onClick</span>: <span class="hljs-function">() =&gt;</span> {},\n        },\n      ],\n    });\n  }\n\n  langs = [\n    { <span class="hljs-attr">label</span>: <span class="hljs-string">&#x27;\u4e2d\u6587\u7b80\u4f53&#x27;</span>, <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;zh-CN&#x27;</span> },\n    { <span class="hljs-attr">label</span>: <span class="hljs-string">&#x27;English&#x27;</span>, <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;en-US&#x27;</span> },\n  ];\n  defaultlang = <span class="hljs-string">&#x27;zh-CN&#x27;</span>;\n}\n'},40991:l=>{l.exports='<span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">mat-dialog-title</span>&gt;</span>Hi, {{ data.name }}<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span>\n<span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">mat-dialog-content</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>What&#x27;s your favorite animal?<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">mat-form-field</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">matInput</span> [(<span class="hljs-attr">ngModel</span>)]=<span class="hljs-string">&quot;data.animal&quot;</span> /&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">mat-form-field</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">mat-dialog-actions</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">mat-button</span> (<span class="hljs-attr">click</span>)=<span class="hljs-string">&quot;onNoClick()&quot;</span>&gt;</span>No Thanks<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">mat-button</span> [<span class="hljs-attr">mat-dialog-close</span>]=<span class="hljs-string">&quot;data.animal&quot;</span> <span class="hljs-attr">cdkFocusInitial</span>&gt;</span>Ok<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n'},45051:(l,n,a)=>{"use strict";a.r(n),a.d(n,{default:()=>e});const e=".mat-mdc-button-base {\n  margin: 0 .5em;\n}\n"},45743:(l,n,a)=>{"use strict";a.r(n),a.d(n,{default:()=>e});const e='{\n  "title": "This is the title",\n  "description": "You can write some messages here",\n  "close": "CLOSE",\n  "ok": "OK",\n  "view": "VIEW"\n}\n'},52349:l=>{l.exports='<span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">mat-raised-button</span> <span class="hljs-attr">color</span>=<span class="hljs-string">&quot;warn&quot;</span> (<span class="hljs-attr">click</span>)=<span class="hljs-string">&quot;alert()&quot;</span>&gt;</span>Alert<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>\n<span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">mat-raised-button</span> <span class="hljs-attr">color</span>=<span class="hljs-string">&quot;accent&quot;</span> (<span class="hljs-attr">click</span>)=<span class="hljs-string">&quot;confirm()&quot;</span>&gt;</span>Confirm<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>\n<span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">mat-raised-button</span> <span class="hljs-attr">color</span>=<span class="hljs-string">&quot;primary&quot;</span> (<span class="hljs-attr">click</span>)=<span class="hljs-string">&quot;open()&quot;</span>&gt;</span>Open Dialog<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>\n'},54540:(l,n,a)=>{"use strict";a.r(n),a.d(n,{default:()=>e});const e='<mat-radio-group [(ngModel)]="defaultlang" (change)="translate.use($event.value)">\n  @for (lang of langs; track lang) {\n    <mat-radio-button [value]="lang.value">{{ lang.label }}</mat-radio-button>\n  }\n</mat-radio-group>\n\n<button mat-raised-button color="primary" (click)="open()">Open Dialog</button>\n'},58351:(l,n,a)=>{"use strict";a.r(n),a.d(n,{default:()=>e});const e="import { Component, inject } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MAT_DIALOG_DATA, MatDialogModule, MatDialogRef } from '@angular/material/dialog';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\nimport { MtxDialog } from '@ng-matero/extensions/dialog';\n\n@Component({\n  selector: 'dialog-original-example',\n  templateUrl: './app.html',\n  styleUrl: './app.scss',\n  imports: [MatButtonModule],\n})\nexport class App {\n  private mtxDialog = inject(MtxDialog);\n\n  animal?: string;\n\n  openOriginal() {\n    const dialogRef = this.mtxDialog.originalOpen(DialogOriginalOverviewDialog, {\n      width: '550px',\n      data: { name: 'nzbin', animal: 'panda' },\n    });\n\n    dialogRef.afterClosed().subscribe(result => {\n      console.log('The dialog was closed');\n      this.animal = result;\n    });\n  }\n}\n\n@Component({\n  selector: 'dialog-overview',\n  templateUrl: './dialog.html',\n  imports: [MatFormFieldModule, MatInputModule, FormsModule, MatDialogModule, MatButtonModule],\n})\nexport class DialogOriginalOverviewDialog {\n  dialogRef = inject<MatDialogRef<DialogOriginalOverviewDialog>>(MatDialogRef);\n  data = inject(MAT_DIALOG_DATA);\n\n  onNoClick(): void {\n    this.dialogRef.close();\n  }\n}\n"},64622:l=>{l.exports='<span class="hljs-keyword">import</span> { <span class="hljs-title class_">Component</span>, inject } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@angular/core&#x27;</span>;\n<span class="hljs-keyword">import</span> { <span class="hljs-title class_">FormsModule</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@angular/forms&#x27;</span>;\n<span class="hljs-keyword">import</span> { <span class="hljs-title class_">MatButtonModule</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@angular/material/button&#x27;</span>;\n<span class="hljs-keyword">import</span> { <span class="hljs-variable constant_">MAT_DIALOG_DATA</span>, <span class="hljs-title class_">MatDialogModule</span>, <span class="hljs-title class_">MatDialogRef</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@angular/material/dialog&#x27;</span>;\n<span class="hljs-keyword">import</span> { <span class="hljs-title class_">MatFormFieldModule</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@angular/material/form-field&#x27;</span>;\n<span class="hljs-keyword">import</span> { <span class="hljs-title class_">MatInputModule</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@angular/material/input&#x27;</span>;\n<span class="hljs-keyword">import</span> { <span class="hljs-title class_">MtxDialog</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@ng-matero/extensions/dialog&#x27;</span>;\n\n<span class="hljs-meta">@Component</span>({\n  <span class="hljs-attr">selector</span>: <span class="hljs-string">&#x27;dialog-original-example&#x27;</span>,\n  <span class="hljs-attr">templateUrl</span>: <span class="hljs-string">&#x27;./app.html&#x27;</span>,\n  <span class="hljs-attr">styleUrl</span>: <span class="hljs-string">&#x27;./app.scss&#x27;</span>,\n  <span class="hljs-attr">imports</span>: [<span class="hljs-title class_">MatButtonModule</span>],\n})\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> {\n  <span class="hljs-keyword">private</span> mtxDialog = <span class="hljs-title function_">inject</span>(<span class="hljs-title class_">MtxDialog</span>);\n\n  <span class="hljs-attr">animal</span>?: <span class="hljs-built_in">string</span>;\n\n  <span class="hljs-title function_">openOriginal</span>(<span class="hljs-params"></span>) {\n    <span class="hljs-keyword">const</span> dialogRef = <span class="hljs-variable language_">this</span>.<span class="hljs-property">mtxDialog</span>.<span class="hljs-title function_">originalOpen</span>(<span class="hljs-title class_">DialogOriginalOverviewDialog</span>, {\n      <span class="hljs-attr">width</span>: <span class="hljs-string">&#x27;550px&#x27;</span>,\n      <span class="hljs-attr">data</span>: { <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;nzbin&#x27;</span>, <span class="hljs-attr">animal</span>: <span class="hljs-string">&#x27;panda&#x27;</span> },\n    });\n\n    dialogRef.<span class="hljs-title function_">afterClosed</span>().<span class="hljs-title function_">subscribe</span>(<span class="hljs-function"><span class="hljs-params">result</span> =&gt;</span> {\n      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;The dialog was closed&#x27;</span>);\n      <span class="hljs-variable language_">this</span>.<span class="hljs-property">animal</span> = result;\n    });\n  }\n}\n\n<span class="hljs-meta">@Component</span>({\n  <span class="hljs-attr">selector</span>: <span class="hljs-string">&#x27;dialog-overview&#x27;</span>,\n  <span class="hljs-attr">templateUrl</span>: <span class="hljs-string">&#x27;./dialog.html&#x27;</span>,\n  <span class="hljs-attr">imports</span>: [<span class="hljs-title class_">MatFormFieldModule</span>, <span class="hljs-title class_">MatInputModule</span>, <span class="hljs-title class_">FormsModule</span>, <span class="hljs-title class_">MatDialogModule</span>, <span class="hljs-title class_">MatButtonModule</span>],\n})\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DialogOriginalOverviewDialog</span> {\n  dialogRef = inject&lt;<span class="hljs-title class_">MatDialogRef</span>&lt;<span class="hljs-title class_">DialogOriginalOverviewDialog</span>&gt;&gt;(<span class="hljs-title class_">MatDialogRef</span>);\n  data = <span class="hljs-title function_">inject</span>(<span class="hljs-variable constant_">MAT_DIALOG_DATA</span>);\n\n  <span class="hljs-title function_">onNoClick</span>(): <span class="hljs-built_in">void</span> {\n    <span class="hljs-variable language_">this</span>.<span class="hljs-property">dialogRef</span>.<span class="hljs-title function_">close</span>();\n  }\n}\n'},67271:l=>{l.exports='<span class="hljs-punctuation">{</span>\n  <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;This is the title&quot;</span><span class="hljs-punctuation">,</span>\n  <span class="hljs-attr">&quot;description&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;You can write some messages here&quot;</span><span class="hljs-punctuation">,</span>\n  <span class="hljs-attr">&quot;close&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;CLOSE&quot;</span><span class="hljs-punctuation">,</span>\n  <span class="hljs-attr">&quot;ok&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;OK&quot;</span><span class="hljs-punctuation">,</span>\n  <span class="hljs-attr">&quot;view&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;VIEW&quot;</span>\n<span class="hljs-punctuation">}</span>\n'},68719:l=>{l.exports='<span class="hljs-tag">&lt;<span class="hljs-name">mat-radio-group</span> [(<span class="hljs-attr">ngModel</span>)]=<span class="hljs-string">&quot;defaultlang&quot;</span> (<span class="hljs-attr">change</span>)=<span class="hljs-string">&quot;translate.use($event.value)&quot;</span>&gt;</span>\n  @for (lang of langs; track lang) {\n    <span class="hljs-tag">&lt;<span class="hljs-name">mat-radio-button</span> [<span class="hljs-attr">value</span>]=<span class="hljs-string">&quot;lang.value&quot;</span>&gt;</span>{{ lang.label }}<span class="hljs-tag">&lt;/<span class="hljs-name">mat-radio-button</span>&gt;</span>\n  }\n<span class="hljs-tag">&lt;/<span class="hljs-name">mat-radio-group</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">mat-raised-button</span> <span class="hljs-attr">color</span>=<span class="hljs-string">&quot;primary&quot;</span> (<span class="hljs-attr">click</span>)=<span class="hljs-string">&quot;open()&quot;</span>&gt;</span>Open Dialog<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>\n'},68908:(l,n,a)=>{"use strict";a.r(n),a.d(n,{default:()=>e});const e="div {\n  padding: 1em 0;\n}\n"},76640:(l,n,a)=>{"use strict";a.r(n),a.d(n,{default:()=>e});const e='<button mat-raised-button color="warn" (click)="alert()">Alert</button>\n<button mat-raised-button color="accent" (click)="confirm()">Confirm</button>\n<button mat-raised-button color="primary" (click)="open()">Open Dialog</button>\n'},77742:l=>{l.exports='<span class="hljs-selector-tag">div</span> {\n  <span class="hljs-attribute">padding</span>: <span class="hljs-number">1em</span> <span class="hljs-number">0</span>;\n}\n'},81482:(l,n,a)=>{"use strict";a.r(n),a.d(n,{default:()=>e});const e='<h1 mat-dialog-title>Hi, {{ data.name }}</h1>\n<div mat-dialog-content>\n  <p>What\'s your favorite animal?</p>\n  <mat-form-field>\n    <input matInput [(ngModel)]="data.animal" />\n  </mat-form-field>\n</div>\n<div mat-dialog-actions>\n  <button mat-button (click)="onNoClick()">No Thanks</button>\n  <button mat-button [mat-dialog-close]="data.animal" cdkFocusInitial>Ok</button>\n</div>\n'},81500:(l,n,a)=>{"use strict";a.r(n),a.d(n,{default:()=>e});const e="import { Component, inject } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MtxDialog } from '@ng-matero/extensions/dialog';\nimport { TranslateService } from '@ngx-translate/core';\n\n@Component({\n  selector: 'dialog-i18n-example',\n  templateUrl: './app.html',\n  styleUrl: './app.scss',\n  imports: [FormsModule, MatRadioModule, MatButtonModule],\n})\nexport class App {\n  private mtxDialog = inject(MtxDialog);\n  translate = inject(TranslateService);\n\n  constructor() {\n    this.translate.addLangs(this.langs.map(item => item.value));\n    this.translate.setDefaultLang(this.defaultlang);\n  }\n\n  open() {\n    this.mtxDialog.open({\n      title: this.translate.stream('title'),\n      description: this.translate.stream('description'),\n      buttons: [\n        {\n          text: this.translate.stream('close'),\n          onClick: () => {},\n        },\n        {\n          color: 'primary',\n          text: this.translate.stream('view'),\n          onClick: () => {},\n        },\n        {\n          color: 'warn',\n          focusInitial: true,\n          text: this.translate.stream('ok'),\n          onClick: () => {},\n        },\n      ],\n    });\n  }\n\n  langs = [\n    { label: '\u4e2d\u6587\u7b80\u4f53', value: 'zh-CN' },\n    { label: 'English', value: 'en-US' },\n  ];\n  defaultlang = 'zh-CN';\n}\n"},81685:l=>{l.exports='<span class="hljs-selector-class">.mat-mdc-button-base</span> {\n  <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> .<span class="hljs-number">5em</span>;\n}\n'},82229:l=>{l.exports='<span class="hljs-punctuation">{</span>\n  <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;\u8fd9\u662f\u6807\u9898&quot;</span><span class="hljs-punctuation">,</span>\n  <span class="hljs-attr">&quot;description&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;\u53ef\u4ee5\u5728\u8fd9\u91cc\u5199\u4e00\u4e9b\u8be6\u7ec6\u4fe1\u606f&quot;</span><span class="hljs-punctuation">,</span>\n  <span class="hljs-attr">&quot;close&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;\u5173\u95ed&quot;</span><span class="hljs-punctuation">,</span>\n  <span class="hljs-attr">&quot;ok&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;\u786e\u5b9a&quot;</span><span class="hljs-punctuation">,</span>\n  <span class="hljs-attr">&quot;view&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;\u67e5\u770b&quot;</span>\n<span class="hljs-punctuation">}</span>\n'},95131:(l,n,a)=>{"use strict";a.r(n),a.d(n,{DialogApi:()=>M,DialogOverview:()=>y,TranslateHttpLoaderFactory:()=>k,routes:()=>_});var e=a(72200),C=a(29330),g=a(2615),b=a(71782),f=a(68018),T=a(65218),O=a(13942),A=a(4840),E=a(9105),u=a(88834),x=a(3176),s=a(73664);const F={title:"Basic confirmation",component:(()=>{var p;class t{constructor(){this.mtxDialog=(0,g.WQX)(x.K)}alert(){this.mtxDialog.alert("My name is Zongbin!","",()=>{this.mtxDialog.alert("Glad to meet you!")})}confirm(){this.mtxDialog.confirm("What's your name?","",()=>{this.mtxDialog.alert("Hi, Zongbin!")},()=>{this.mtxDialog.alert("I don't know.")})}open(){this.mtxDialog.open({title:"This is the title",description:"You can write some messages here.",showCloseIcon:!0,buttons:[{text:"CLOSE",onClick:()=>{this.mtxDialog.alert("You click Close button.")}},{color:"primary",text:"VIEW",onClick:()=>{this.mtxDialog.alert("You click View button.")}},{color:"warn",text:"OK",focusInitial:!0,onClick:()=>{this.mtxDialog.alert("You click Ok button.")}}]})}static#s=p=()=>(this.\u0275fac=function(o){return new(o||t)},this.\u0275cmp=s.VBU({type:t,selectors:[["dialog-basic-example"]],decls:6,vars:0,consts:[["mat-raised-button","","color","warn",3,"click"],["mat-raised-button","","color","accent",3,"click"],["mat-raised-button","","color","primary",3,"click"]],template:function(o,i){1&o&&(s.j41(0,"button",0),s.bIt("click",function(){return i.alert()}),s.EFF(1,"Alert"),s.k0s(),s.j41(2,"button",1),s.bIt("click",function(){return i.confirm()}),s.EFF(3,"Confirm"),s.k0s(),s.j41(4,"button",2),s.bIt("click",function(){return i.open()}),s.EFF(5,"Open Dialog"),s.k0s())},dependencies:[u.Hl,u.$z],styles:[".mat-mdc-button-base[_ngcontent-%COMP%]{margin:0 .5em}"]}))}return p(),t})(),files:[{file:"app.html",content:a(52349),filecontent:a(76640)},{file:"app.ts",content:a(8523),filecontent:a(35232)},{file:"app.scss",content:a(34677),filecontent:a(45051)}]};var d=a(89417),v=a(34522);function w(p,t){if(1&p&&(s.j41(0,"mat-radio-button",1),s.EFF(1),s.k0s()),2&p){const j=t.$implicit;s.Y8G("value",j.value),s.R7$(),s.JRh(j.label)}}const R={title:"I18n confirmation",component:(()=>{var p;class t{constructor(){this.mtxDialog=(0,g.WQX)(x.K),this.translate=(0,g.WQX)(f.c$),this.langs=[{label:"\u4e2d\u6587\u7b80\u4f53",value:"zh-CN"},{label:"English",value:"en-US"}],this.defaultlang="zh-CN",this.translate.addLangs(this.langs.map(c=>c.value)),this.translate.setDefaultLang(this.defaultlang)}open(){this.mtxDialog.open({title:this.translate.stream("title"),description:this.translate.stream("description"),buttons:[{text:this.translate.stream("close"),onClick:()=>{}},{color:"primary",text:this.translate.stream("view"),onClick:()=>{}},{color:"warn",focusInitial:!0,text:this.translate.stream("ok"),onClick:()=>{}}]})}static#s=p=()=>(this.\u0275fac=function(o){return new(o||t)},this.\u0275cmp=s.VBU({type:t,selectors:[["dialog-i18n-example"]],decls:5,vars:1,consts:[[3,"ngModelChange","change","ngModel"],[3,"value"],["mat-raised-button","","color","primary",3,"click"]],template:function(o,i){1&o&&(s.j41(0,"mat-radio-group",0),s.mxI("ngModelChange",function(h){return s.DH7(i.defaultlang,h)||(i.defaultlang=h),h}),s.bIt("change",function(h){return i.translate.use(h.value)}),s.Z7z(1,w,2,2,"mat-radio-button",1,s.fX1),s.k0s(),s.j41(3,"button",2),s.bIt("click",function(){return i.open()}),s.EFF(4,"Open Dialog"),s.k0s()),2&o&&(s.R50("ngModel",i.defaultlang),s.R7$(),s.Dyx(i.langs))},dependencies:[d.YN,d.BC,d.vS,v.Wk,v.VT,v._g,u.Hl,u.$z],styles:[".mat-mdc-button-base[_ngcontent-%COMP%]{margin:0 .5em}"]}))}return p(),t})(),files:[{file:"app.html",content:a(68719),filecontent:a(54540)},{file:"app.ts",content:a(39461),filecontent:a(81500)},{file:"app.scss",content:a(81685),filecontent:a(32671)},{file:"assets/zh-CN.json",content:a(82229),filecontent:a(17053)},{file:"assets/en-US.json",content:a(67271),filecontent:a(45743)}]};var m=a(32591),I=a(71228),D=a(33746),B=a(64727);function U(p,t){if(1&p&&(s.j41(0,"div"),s.EFF(1," You chose: "),s.j41(2,"strong"),s.EFF(3),s.k0s()()),2&p){const j=s.XpG();s.R7$(3),s.JRh(j.animal)}}let P=(()=>{var p;class t{constructor(){this.mtxDialog=(0,g.WQX)(x.K)}openOriginal(){this.mtxDialog.originalOpen(W,{width:"550px",data:{name:"nzbin",animal:"panda"}}).afterClosed().subscribe(o=>{console.log("The dialog was closed"),this.animal=o})}static#s=p=()=>(this.\u0275fac=function(o){return new(o||t)},this.\u0275cmp=s.VBU({type:t,selectors:[["dialog-original-example"]],decls:3,vars:1,consts:[["mat-raised-button","",3,"click"]],template:function(o,i){1&o&&(s.j41(0,"button",0),s.bIt("click",function(){return i.openOriginal()}),s.EFF(1,"Open Original Dialog"),s.k0s(),s.nVh(2,U,4,1,"div")),2&o&&(s.R7$(2),s.vxM(i.animal?2:-1))},dependencies:[u.Hl,u.$z],styles:["div[_ngcontent-%COMP%]{padding:1em 0}"]}))}return p(),t})(),W=(()=>{var p;class t{constructor(){this.dialogRef=(0,g.WQX)(m.CP),this.data=(0,g.WQX)(m.Vh)}onNoClick(){this.dialogRef.close()}static#s=p=()=>(this.\u0275fac=function(o){return new(o||t)},this.\u0275cmp=s.VBU({type:t,selectors:[["dialog-overview"]],decls:12,vars:3,consts:[["mat-dialog-title",""],["mat-dialog-content",""],["matInput","",3,"ngModelChange","ngModel"],["mat-dialog-actions",""],["mat-button","",3,"click"],["mat-button","","cdkFocusInitial","",3,"mat-dialog-close"]],template:function(o,i){1&o&&(s.j41(0,"h1",0),s.EFF(1),s.k0s(),s.j41(2,"div",1)(3,"p"),s.EFF(4,"What's your favorite animal?"),s.k0s(),s.j41(5,"mat-form-field")(6,"input",2),s.mxI("ngModelChange",function(h){return s.DH7(i.data.animal,h)||(i.data.animal=h),h}),s.k0s()()(),s.j41(7,"div",3)(8,"button",4),s.bIt("click",function(){return i.onNoClick()}),s.EFF(9,"No Thanks"),s.k0s(),s.j41(10,"button",5),s.EFF(11,"Ok"),s.k0s()()),2&o&&(s.R7$(),s.SpI("Hi, ",i.data.name),s.R7$(5),s.R50("ngModel",i.data.animal),s.R7$(4),s.Y8G("mat-dialog-close",i.data.animal))},dependencies:[I.R,B.rl,D.fS,D.fg,d.YN,d.me,d.BC,d.vS,m.hM,m.tx,m.BI,m.E7,m.Yi,u.Hl,u.$z],encapsulation:2}))}return p(),t})();const L={title:"Material original dialog",component:P,files:[{file:"app.html",content:a(32492),filecontent:a(21815)},{file:"app.ts",content:a(64622),filecontent:a(58351)},{file:"app.scss",content:a(77742),filecontent:a(68908)},{file:"dialog.html",content:a(40991),filecontent:a(81482)}]};function X(p,t){if(1&p&&s.nrm(0,"doc-heading",0)(1,"example-viewer",1),2&p){const j=t.$implicit;s.Y8G("text",j.title),s.R7$(),s.Y8G("exampleData",j)}}function Y(p,t){1&p&&s.Z7z(0,X,2,2,null,null,s.fX1),2&p&&s.Dyx(t.examples)}function K(p,t){1&p&&s.nrm(0,"doc-viewer",0),2&p&&s.Y8G("textContent",t.content.default)}let y=(()=>{var p;class t{constructor(){this.route=(0,g.WQX)(b.nX)}static#s=p=()=>(this.\u0275fac=function(o){return new(o||t)},this.\u0275cmp=s.VBU({type:t,selectors:[["app-dialog-overview"]],decls:4,vars:3,consts:[[3,"text"],[3,"exampleData"]],template:function(o,i){if(1&o&&(s.j41(0,"p"),s.EFF(1," The Extensions dialog is a wrapper of Angular Material dialog.\n"),s.k0s(),s.nVh(2,Y,2,0),s.nI1(3,"async")),2&o){let r;s.R7$(2),s.vxM((r=s.bMT(3,1,i.route.data))?2:-1,r)}},dependencies:[O.d,E.v,e.Jj],encapsulation:2}))}return p(),t})(),M=(()=>{var p;class t{constructor(){this.route=(0,g.WQX)(b.nX)}static#s=p=()=>(this.\u0275fac=function(o){return new(o||t)},this.\u0275cmp=s.VBU({type:t,selectors:[["app-dialog-api"]],decls:2,vars:3,consts:[[3,"textContent"]],template:function(o,i){if(1&o&&(s.nVh(0,K,1,1,"doc-viewer",0),s.nI1(1,"async")),2&o){let r;s.vxM((r=s.bMT(1,1,i.route.data))?0:-1,r)}},dependencies:[A.T,e.Jj],encapsulation:2}))}return p(),t})();function k(p){return new T.s(p,"assets/i18n/dialog/","_json")}const _=[{path:"",redirectTo:"overview",pathMatch:"full"},{path:"overview",component:y,pathMatch:"full",data:{examples:[F,L,R]},providers:[(0,f.D8)({loader:{provide:f.Wr,useFactory:k,deps:[C.Qq]}})]},{path:"api",component:M,pathMatch:"full",data:{content:a(95722)}},{path:"**",redirectTo:"overview"}]},95722:(l,n,a)=>{"use strict";a.r(n),a.d(n,{default:()=>e});const e='<h1 id="dialog">Dialog</h1>\n<h2 id="api-reference-for-material-extensions-dialog">API reference for Material Extensions Dialog</h2>\n<p><code>import { MtxDialogModule } from &apos;@ng-matero/extensions/dialog&apos;;</code></p>\n<h3 id="services">Services</h3>\n<h4 id="mtxdialog"><code>MtxDialog</code></h4>\n<h5 id="methods">Methods</h5>\n<p><a>alert</a></p>\n<p>A simple alert dialog with a single button.</p>\n<table>\n<thead>\n<tr>\n<th align="left">Parameters</th>\n<th align="left">Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align="left"><code>title: string | Observable&lt;string&gt;</code></td>\n<td align="left">The dialog title.</td>\n</tr>\n<tr>\n<td align="left"><code>description: string | Observable&lt;string&gt;</code></td>\n<td align="left">The dialog description.</td>\n</tr>\n<tr>\n<td align="left"><code>onOk: () =&gt; void</code></td>\n<td align="left">The ok callback function.</td>\n</tr>\n</tbody></table>\n<p><a>confirm</a></p>\n<p>A confirm dialog with a cancel and a confirm button.</p>\n<table>\n<thead>\n<tr>\n<th align="left">Parameters</th>\n<th align="left">Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align="left"><code>title: string | Observable&lt;string&gt;</code></td>\n<td align="left">The dialog title.</td>\n</tr>\n<tr>\n<td align="left"><code>description: string | Observable&lt;string&gt;</code></td>\n<td align="left">The dialog description.</td>\n</tr>\n<tr>\n<td align="left"><code>onOk: () =&gt; void</code></td>\n<td align="left">The ok callback function.</td>\n</tr>\n<tr>\n<td align="left"><code>onClose: () =&gt; void</code></td>\n<td align="left">The close callback function.</td>\n</tr>\n</tbody></table>\n<p><a>open</a></p>\n<p>Opens a modal dialog containing the given template.</p>\n<table>\n<thead>\n<tr>\n<th align="left">Parameters</th>\n<th align="left">Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align="left"><code>config: MtxDialogData</code></td>\n<td align="left">The dialog description.</td>\n</tr>\n<tr>\n<td align="left"><code>componentOrTemplateRef: ComponentType&lt;T&gt; | TemplateRef&lt;any&gt;</code></td>\n<td align="left">The component to load into the dialog.</td>\n</tr>\n</tbody></table>\n<p><a>originalOpen</a></p>\n<p>The original <code>matDialog</code> open method.</p>\n<table>\n<thead>\n<tr>\n<th align="left">Parameters</th>\n<th align="left">Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align="left"><code>componentOrTemplateRef: ComponentType&lt;T&gt; | TemplateRef&lt;any&gt;</code></td>\n<td align="left">The component to load into the dialog.</td>\n</tr>\n<tr>\n<td align="left"><code>config?: MatDialogConfig&lt;D&gt;</code></td>\n<td align="left">The dialog description.</td>\n</tr>\n</tbody></table>\n<h3 id="interfaces">Interfaces</h3>\n<h4 id="mtxdialogdata"><code>MtxDialogData</code></h4>\n<pre class="hljs"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">MtxDialogData</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">MatDialogConfig</span> {\n  <span class="hljs-attr">title</span>?: <span class="hljs-built_in">string</span> | <span class="hljs-title class_">Observable</span>&lt;<span class="hljs-built_in">string</span>&gt;;\n  <span class="hljs-attr">description</span>?: <span class="hljs-built_in">string</span> | <span class="hljs-title class_">Observable</span>&lt;<span class="hljs-built_in">string</span>&gt;;\n  <span class="hljs-attr">buttons</span>?: <span class="hljs-title class_">MtxDialogBtns</span>[];\n  <span class="hljs-attr">showCloseIcon</span>?: <span class="hljs-built_in">boolean</span>;\n}\n</pre>\n<h4 id="mtxdialogbtns"><code>MtxDialogBtns</code></h4>\n<pre class="hljs"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">MtxDialogBtns</span> {\n  <span class="hljs-attr">type</span>?: <span class="hljs-title class_">MatButtonAppearance</span>;\n  <span class="hljs-attr">color</span>?: <span class="hljs-title class_">ThemePalette</span>;\n  <span class="hljs-attr">class</span>?: <span class="hljs-built_in">string</span>;\n  <span class="hljs-attr">focusInitial</span>?: <span class="hljs-built_in">boolean</span>;\n  <span class="hljs-attr">text</span>: <span class="hljs-built_in">string</span> | <span class="hljs-title class_">Observable</span>&lt;<span class="hljs-built_in">string</span>&gt;;\n  <span class="hljs-attr">onClick</span>?: <span class="hljs-function">() =&gt;</span> <span class="hljs-built_in">void</span>;\n}\n</pre>\n'}}]);