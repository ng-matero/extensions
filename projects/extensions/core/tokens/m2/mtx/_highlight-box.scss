@use 'sass:map';
@use 'sass:math';
@use '@angular/material' as mat;
@use '../../token-definition';
@use '../../../style/elevation';

// The prefix used to generate the fully qualified name for tokens in this file.
$prefix: (mtx, highlight-box);

// Tokens that can't be configured through Angular Material's current theming API,
// but may be in a future version of the theming API.
@function get-unthemable-tokens() {
  @return (
    container-shape: 4px,
    border-left-width: 4px,
    padding: 12px,
    elevation-shadow: elevation.get-box-shadow(3),
  );
}

// Tokens that can be configured through Angular Material's color theming API.
@function get-color-tokens($theme) {
  $is-dark: mat.get-theme-type($theme) == dark;

  @return (
    border-color: transparent,
    background-color: mat.m2-get-color-from-palette(mat.$m2-gray-palette, if($is-dark, 900, 100)),
    text-color: mat.get-theme-color($theme, foreground, text),
    info-border-color: transparent,
    info-text-color: mat.get-theme-color($theme, foreground, text),
    success-border-color: transparent,
    success-text-color: mat.get-theme-color($theme, foreground, text),
    warning-border-color: transparent,
    warning-text-color: mat.get-theme-color($theme, foreground, text),
    danger-border-color: transparent,
    danger-text-color: mat.get-theme-color($theme, foreground, text),
  );
}

// Tokens that can be configured through Angular Material's typography theming API.
@function get-typography-tokens($theme) {
  @return ();
}

// Tokens that can be configured through Angular Material's density theming API.
@function get-density-tokens($theme) {
  $density-scale: mat.private-clamp-density(mat.get-theme-density($theme), -3);
  $size-scale: (
    0: 68px,
    -1: 64px,
    -2: 60px,
    -3: 56px,
    -4: 52px,
    -5: 40px,
  );
  $height: map.get($size-scale, $density-scale);
  $vertical-deduction: math.div(68px - $height, 2);

  $vertical-padding: 12px - $vertical-deduction;
  @return (
    container-height: $height,
    container-vertical-padding: $vertical-padding,
  );
}

// Combines the tokens generated by the above functions into a single map with placeholder values.
// This is used to create token slots.
@function get-token-slots() {
  @return mat.private-deep-merge-all(
    get-unthemable-tokens(),
    get-color-tokens(token-definition.$placeholder-color-config),
    get-typography-tokens(token-definition.$placeholder-typography-config),
    get-density-tokens(token-definition.$placeholder-density-config)
  );
}
