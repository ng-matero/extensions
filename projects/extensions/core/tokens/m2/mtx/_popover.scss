@use 'sass:map';
@use '@angular/material' as mat;
@use '../../token-definition';

// The prefix used to generate the fully qualified name for tokens in this file.
$prefix: (mtx, popover);

// Tokens that can't be configured through Angular Material's current theming API,
// but may be in a future version of the theming API.
@function get-unthemable-tokens() {
  @return (
    container-shape: 4px,
    // Note that this uses a value, rather than a computed box-shadow, because we use
    // the value at runtime to determine which shadow to set based on the popover's depth.
    base-elevation-level: 8,
  );
}

// Tokens that can be configured through Angular Material's color theming API.
@function get-color-tokens($theme) {
  @return (
    outline-color: mat.get-theme-color($theme, foreground, divider),
    background-color: mat.get-theme-color($theme, background, card),
    text-color: mat.get-theme-color($theme, foreground, text),
  );
}

// Tokens that can be configured through Angular Material's typography theming API.
@function get-typography-tokens($theme) {
  @return ();
}

// Tokens that can be configured through Angular Material's density theming API.
@function get-density-tokens($theme) {
  @return ();
}

// Combines the tokens generated by the above functions into a single map with placeholder values.
// This is used to create token slots.
@function get-token-slots() {
  @return mat.private-deep-merge-all(
    get-unthemable-tokens(),
    get-color-tokens(token-definition.$placeholder-color-config),
    get-typography-tokens(token-definition.$placeholder-typography-config),
    get-density-tokens(token-definition.$placeholder-density-config)
  );
}
