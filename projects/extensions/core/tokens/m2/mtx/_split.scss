@use 'sass:color';
@use 'sass:map';
@use 'sass:meta';
@use '../../token-utils';
@use '../../../theming/theming';
@use '../../../style/sass-utils';

// The prefix used to generate the fully qualified name for tokens in this file.
$prefix: (mtx, split);

@function private-get-color-palette-color-tokens($config, $palette-name) {
  $palette: map.get($config, $palette-name);

  @return (
    gutter-hover-state-background-color: theming.get-color-from-palette($palette, text),
  );
}

// Tokens that can't be configured through Angular Material's current theming API,
// but may be in a future version of the theming API.
@function get-unthemable-tokens() {
  @return ();
}

// Tokens that can be configured through Angular Material's color theming API.
@function get-color-tokens($config) {
  $foreground: map.get($config, foreground);
  $gutter-tokens: private-get-color-palette-color-tokens($config, primary);

  @return sass-utils.merge-all($gutter-tokens, (
    gutter-background-color: theming.get-color-from-palette($foreground, divider, .12),
  ));
}

// Tokens that can be configured through Angular Material's typography theming API.
@function get-typography-tokens($config) {
  @return ();
}

// Tokens that can be configured through Angular Material's density theming API.
@function get-density-tokens($config) {
  @return ();
}

// Combines the tokens generated by the above functions into a single map with placeholder values.
// This is used to create token slots.
@function get-token-slots() {
  @return sass-utils.deep-merge-all(
    get-unthemable-tokens(),
    get-color-tokens(token-utils.$placeholder-color-config),
    get-typography-tokens(token-utils.$placeholder-typography-config),
    get-density-tokens(token-utils.$placeholder-density-config)
  );
}
