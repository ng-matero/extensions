@use 'sass:map';
@use '@angular/material' as mat;
@use '../core/theming/inspection';
@use '../core/theming/validation';
@use '../core/tokens/token-utils';
@use './m2-split';

@mixin base($theme) {
  @if mat.get-theme-version($theme) == 1 {
    @include _theme-from-tokens(inspection.get-theme-tokens($theme, base));
  }
  @else {
    @include mat.private-current-selector-or-root() {
      @include token-utils.create-token-values(
        m2-split.$prefix,
        m2-split.get-unthemable-tokens()
      );
    }
  }
}

@mixin color($theme, $options...) {
  @if mat.get-theme-version($theme) == 1 {
    @include _theme-from-tokens(inspection.get-theme-tokens($theme, color), $options...);
  }
  @else {
    @include mat.private-current-selector-or-root() {
      @include token-utils.create-token-values(
        m2-split.$prefix,
        m2-split.get-color-tokens($theme)
      );
    }

    .mtx-split>.mtx-split-gutter {
      &.mat-accent:hover {
        $accent-tokens: m2-split.private-get-color-palette-color-tokens($theme, accent);
        @include token-utils.create-token-values(m2-split.$prefix, $accent-tokens);
      }

      &.mat-warn:hover {
        $warn-tokens: m2-split.private-get-color-palette-color-tokens($theme, warn);
        @include token-utils.create-token-values(m2-split.$prefix, $warn-tokens);
      }
    }
  }
}

@mixin typography($theme) {
  @if mat.get-theme-version($theme) == 1 {
    @include _theme-from-tokens(inspection.get-theme-tokens($theme, typography));
  }
  @else {}
}

@mixin density($theme) {
  @if mat.get-theme-version($theme) == 1 {
    @include _theme-from-tokens(inspection.get-theme-tokens($theme, density));
  }
  @else {}
}

/// Defines the tokens that will be available in the `overrides` mixin and for docs extraction.
@function _define-overrides() {
  @return (
    (
      namespace: m2-split.$prefix,
      tokens: m2-split.get-token-slots(),
    ),
  );
}

@mixin overrides($tokens: ()) {
  @include token-utils.batch-create-token-values($tokens, _define-overrides()...);
}

@mixin theme($theme, $options...) {
  @include mat.private-check-duplicate-theme-styles($theme, 'mtx-split') {
    @if mat.get-theme-version($theme) == 1 {
      @include _theme-from-tokens(inspection.get-theme-tokens($theme), $options...);
    }
    @else {
      @include base($theme);
      @if mat.theme-has($theme, color) {
        @include color($theme);
      }
      @if mat.theme-has($theme, density) {
        @include density($theme);
      }
      @if mat.theme-has($theme, typography) {
        @include typography($theme);
      }
    }
  }
}

@mixin _theme-from-tokens($tokens, $options...) {
  @include validation.selector-defined(
    'Calls to Angular Material theme mixins with an M3 theme must be wrapped in a selector');
  $mtx-split-tokens: token-utils.get-tokens-for($tokens, m2-split.$prefix, $options...);
  @include token-utils.create-token-values(m2-split.$prefix, $mtx-split-tokens);
}
