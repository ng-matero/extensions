(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[980],{27252:r=>{r.exports='<span class="hljs-keyword">import</span> { <span class="hljs-title class_">Component</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@angular/core&#x27;</span>;\n<span class="hljs-keyword">import</span> { <span class="hljs-title class_">FormsModule</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@angular/forms&#x27;</span>;\n<span class="hljs-keyword">import</span> { <span class="hljs-title class_">MatCheckboxModule</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@angular/material/checkbox&#x27;</span>;\n<span class="hljs-keyword">import</span> { <span class="hljs-title class_">MatRadioModule</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@angular/material/radio&#x27;</span>;\n<span class="hljs-keyword">import</span> { <span class="hljs-title class_">MatSliderModule</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@angular/material/slider&#x27;</span>;\n<span class="hljs-keyword">import</span> { <span class="hljs-title class_">MtxAlertModule</span>, <span class="hljs-title class_">MtxAlertType</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@ng-matero/extensions/alert&#x27;</span>;\n\n<span class="hljs-meta">@Component</span>({\n  <span class="hljs-attr">selector</span>: <span class="hljs-string">&#x27;alert-configurable-example&#x27;</span>,\n  <span class="hljs-attr">templateUrl</span>: <span class="hljs-string">&#x27;./app.html&#x27;</span>,\n  <span class="hljs-attr">styleUrl</span>: <span class="hljs-string">&#x27;./app.scss&#x27;</span>,\n  <span class="hljs-attr">imports</span>: [<span class="hljs-title class_">FormsModule</span>, <span class="hljs-title class_">MatRadioModule</span>, <span class="hljs-title class_">MatCheckboxModule</span>, <span class="hljs-title class_">MatSliderModule</span>, <span class="hljs-title class_">MtxAlertModule</span>],\n})\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> {\n  <span class="hljs-attr">type</span>: <span class="hljs-title class_">MtxAlertType</span> = <span class="hljs-string">&#x27;info&#x27;</span>;\n  dismissible = <span class="hljs-literal">false</span>;\n  elevation = <span class="hljs-number">0</span>;\n\n  <span class="hljs-title function_">onClosed</span>(<span class="hljs-params"><span class="hljs-attr">e</span>: <span class="hljs-built_in">any</span></span>) {\n    <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;closed event!&#x27;</span>);\n    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(e);\n  }\n}\n'},31319:(r,p,a)=>{"use strict";a.r(p),a.d(p,{default:()=>i});const i='<h2>Alert configuration</h2>\n\n<section>\n  <label for="">Type:</label>\n  <mat-radio-group [(ngModel)]="type">\n    <mat-radio-button value="info">Info</mat-radio-button>\n    <mat-radio-button value="success">Success</mat-radio-button>\n    <mat-radio-button value="warning">Warning</mat-radio-button>\n    <mat-radio-button value="danger">Danger</mat-radio-button>\n  </mat-radio-group>\n</section>\n\n<section>\n  <mat-checkbox [(ngModel)]="dismissible">Dismissible</mat-checkbox>\n</section>\n\n<section>\n  <label for="">Elevation:</label>\n  <mat-slider min="0" max="24" discrete>\n    <input matSliderThumb [(ngModel)]="elevation" />\n  </mat-slider>\n</section>\n\n<h2>Result</h2>\n\n<mtx-alert\n  [type]="type"\n  [elevation]="elevation"\n  [dismissible]="dismissible"\n  (closed)="onClosed($event)"\n>\n  <strong>Heads up!</strong>\n  This alert needs your attention, but it\'s not super important.\n</mtx-alert>\n'},34980:(r,p,a)=>{"use strict";a.r(p),a.d(p,{AlertApi:()=>M,AlertOverview:()=>x,routes:()=>k});var i=a(72200),m=a(2615),j=a(71782),b=a(4840),y=a(9105),h=a(89417),f=a(82765),u=a(34522),g=a(43881),v=a(23822),s=a(73664);let A=(()=>{var t;class n{static#s=t=()=>(this.\u0275fac=function(e){return new(e||n)},this.\u0275mod=s.$C({type:n}),this.\u0275inj=m.G2t({imports:[i.MD,v.s]}))}return t(),n})();const T={title:"Configurable alert",component:(()=>{var t;class n{constructor(){this.type="info",this.dismissible=!1,this.elevation=0}onClosed(d){alert("closed event!"),console.log(d)}static#s=t=()=>(this.\u0275fac=function(e){return new(e||n)},this.\u0275cmp=s.VBU({type:n,selectors:[["alert-configurable-example"]],decls:28,vars:6,consts:[["for",""],[3,"ngModelChange","ngModel"],["value","info"],["value","success"],["value","warning"],["value","danger"],["min","0","max","24","discrete",""],["matSliderThumb","",3,"ngModelChange","ngModel"],[3,"closed","type","elevation","dismissible"]],template:function(e,l){1&e&&(s.j41(0,"h2"),s.EFF(1,"Alert configuration"),s.k0s(),s.j41(2,"section")(3,"label",0),s.EFF(4,"Type:"),s.k0s(),s.j41(5,"mat-radio-group",1),s.mxI("ngModelChange",function(o){return s.DH7(l.type,o)||(l.type=o),o}),s.j41(6,"mat-radio-button",2),s.EFF(7,"Info"),s.k0s(),s.j41(8,"mat-radio-button",3),s.EFF(9,"Success"),s.k0s(),s.j41(10,"mat-radio-button",4),s.EFF(11,"Warning"),s.k0s(),s.j41(12,"mat-radio-button",5),s.EFF(13,"Danger"),s.k0s()()(),s.j41(14,"section")(15,"mat-checkbox",1),s.mxI("ngModelChange",function(o){return s.DH7(l.dismissible,o)||(l.dismissible=o),o}),s.EFF(16,"Dismissible"),s.k0s()(),s.j41(17,"section")(18,"label",0),s.EFF(19,"Elevation:"),s.k0s(),s.j41(20,"mat-slider",6)(21,"input",7),s.mxI("ngModelChange",function(o){return s.DH7(l.elevation,o)||(l.elevation=o),o}),s.k0s()()(),s.j41(22,"h2"),s.EFF(23,"Result"),s.k0s(),s.j41(24,"mtx-alert",8),s.bIt("closed",function(o){return l.onClosed(o)}),s.j41(25,"strong"),s.EFF(26,"Heads up!"),s.k0s(),s.EFF(27," This alert needs your attention, but it's not super important.\n"),s.k0s()),2&e&&(s.R7$(5),s.R50("ngModel",l.type),s.R7$(10),s.R50("ngModel",l.dismissible),s.R7$(6),s.R50("ngModel",l.elevation),s.R7$(3),s.Y8G("type",l.type)("elevation",l.elevation)("dismissible",l.dismissible))},dependencies:[h.YN,h.me,h.BC,h.vS,u.Wk,u.VT,u._g,f.g7,f.So,g.Ez,g.IV,g.OU,A,v.s],styles:["label[_ngcontent-%COMP%]{padding:0 8px}"]}))}return t(),n})(),files:[{file:"app.html",content:a(83642),filecontent:a(31319)},{file:"app.ts",content:a(27252),filecontent:a(55919)},{file:"app.scss",content:a(88418),filecontent:a(62060)}]};function C(t,n){1&t&&s.nrm(0,"example-viewer",0),2&t&&s.Y8G("exampleData",n.$implicit)}function F(t,n){1&t&&s.Z7z(0,C,1,1,"example-viewer",0,s.fX1),2&t&&s.Dyx(n.examples)}function E(t,n){1&t&&s.nrm(0,"doc-viewer",0),2&t&&s.Y8G("textContent",n.content.default)}let x=(()=>{var t;class n{constructor(){this.route=(0,m.WQX)(j.nX)}static#s=t=()=>(this.\u0275fac=function(e){return new(e||n)},this.\u0275cmp=s.VBU({type:n,selectors:[["app-alert-overview"]],decls:2,vars:3,consts:[[3,"exampleData"]],template:function(e,l){if(1&e&&(s.nVh(0,F,2,0),s.nI1(1,"async")),2&e){let c;s.vxM((c=s.bMT(1,1,l.route.data))?0:-1,c)}},dependencies:[y.v,i.Jj],encapsulation:2}))}return t(),n})(),M=(()=>{var t;class n{constructor(){this.route=(0,m.WQX)(j.nX)}static#s=t=()=>(this.\u0275fac=function(e){return new(e||n)},this.\u0275cmp=s.VBU({type:n,selectors:[["app-alert-api"]],decls:2,vars:3,consts:[[3,"textContent"]],template:function(e,l){if(1&e&&(s.nVh(0,E,1,1,"doc-viewer",0),s.nI1(1,"async")),2&e){let c;s.vxM((c=s.bMT(1,1,l.route.data))?0:-1,c)}},dependencies:[b.T,i.Jj],encapsulation:2}))}return t(),n})();const k=[{path:"",redirectTo:"overview",pathMatch:"full"},{path:"overview",component:x,pathMatch:"full",data:{examples:[T]}},{path:"api",component:M,pathMatch:"full",data:{content:a(86676)}},{path:"**",redirectTo:"overview"}]},55919:(r,p,a)=>{"use strict";a.r(p),a.d(p,{default:()=>i});const i="import { Component } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MtxAlertModule, MtxAlertType } from '@ng-matero/extensions/alert';\n\n@Component({\n  selector: 'alert-configurable-example',\n  templateUrl: './app.html',\n  styleUrl: './app.scss',\n  imports: [FormsModule, MatRadioModule, MatCheckboxModule, MatSliderModule, MtxAlertModule],\n})\nexport class App {\n  type: MtxAlertType = 'info';\n  dismissible = false;\n  elevation = 0;\n\n  onClosed(e: any) {\n    alert('closed event!');\n    console.log(e);\n  }\n}\n"},62060:(r,p,a)=>{"use strict";a.r(p),a.d(p,{default:()=>i});const i="label {\n  padding: 0 8px;\n}\n"},83642:r=>{r.exports='<span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>Alert configuration<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">section</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>Type:<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">mat-radio-group</span> [(<span class="hljs-attr">ngModel</span>)]=<span class="hljs-string">&quot;type&quot;</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">mat-radio-button</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;info&quot;</span>&gt;</span>Info<span class="hljs-tag">&lt;/<span class="hljs-name">mat-radio-button</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">mat-radio-button</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;success&quot;</span>&gt;</span>Success<span class="hljs-tag">&lt;/<span class="hljs-name">mat-radio-button</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">mat-radio-button</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;warning&quot;</span>&gt;</span>Warning<span class="hljs-tag">&lt;/<span class="hljs-name">mat-radio-button</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">mat-radio-button</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;danger&quot;</span>&gt;</span>Danger<span class="hljs-tag">&lt;/<span class="hljs-name">mat-radio-button</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">mat-radio-group</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">section</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">section</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">mat-checkbox</span> [(<span class="hljs-attr">ngModel</span>)]=<span class="hljs-string">&quot;dismissible&quot;</span>&gt;</span>Dismissible<span class="hljs-tag">&lt;/<span class="hljs-name">mat-checkbox</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">section</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">section</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>Elevation:<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">mat-slider</span> <span class="hljs-attr">min</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">max</span>=<span class="hljs-string">&quot;24&quot;</span> <span class="hljs-attr">discrete</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">matSliderThumb</span> [(<span class="hljs-attr">ngModel</span>)]=<span class="hljs-string">&quot;elevation&quot;</span> /&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">mat-slider</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">section</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>Result<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">mtx-alert</span>\n  [<span class="hljs-attr">type</span>]=<span class="hljs-string">&quot;type&quot;</span>\n  [<span class="hljs-attr">elevation</span>]=<span class="hljs-string">&quot;elevation&quot;</span>\n  [<span class="hljs-attr">dismissible</span>]=<span class="hljs-string">&quot;dismissible&quot;</span>\n  (<span class="hljs-attr">closed</span>)=<span class="hljs-string">&quot;onClosed($event)&quot;</span>\n&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span>Heads up!<span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span>\n  This alert needs your attention, but it&#x27;s not super important.\n<span class="hljs-tag">&lt;/<span class="hljs-name">mtx-alert</span>&gt;</span>\n'},86676:(r,p,a)=>{"use strict";a.r(p),a.d(p,{default:()=>i});const i='<h1 id="alert">Alert</h1>\n<h2 id="api-reference-for-material-extensions-alert">API reference for Material Extensions Alert</h2>\n<p><code>import { MtxAlertModule } from &apos;@ng-matero/extensions/alert&apos;;</code></p>\n<h3 id="directives">Directives</h3>\n<h4 id="mtxalert"><code>MtxAlert</code></h4>\n<p>Selector: <code>[mtx-alert]</code></p>\n<p>Exported as: <code>mtxAlert</code></p>\n<h5 id="properties">Properties</h5>\n<table>\n<thead>\n<tr>\n<th align="left">Name</th>\n<th align="left">Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align="left"><code>@Input()</code><br><code>type: MtxAlertType</code></td>\n<td align="left">The alert&apos;s type. Default is <strong><code>&apos;default&apos;</code></strong>.</td>\n</tr>\n<tr>\n<td align="left"><code>@Input()</code><br><code>dismissible: boolean</code></td>\n<td align="left">Whether to display an inline close button.</td>\n</tr>\n<tr>\n<td align="left"><code>@Input()</code><br><code>elevation: number</code></td>\n<td align="left">The alert&apos;s elevation (0~24). Default is <strong><code>0</code></strong>.</td>\n</tr>\n<tr>\n<td align="left"><code>@Output()</code><br><code>closed: EventEmitter&lt;MtxAlert&gt;</code></td>\n<td align="left">Event emitted when the alert closed.</td>\n</tr>\n</tbody></table>\n<h3 id="type-aliases">Type aliases</h3>\n<h4 id="mtxalerttype"><code>MtxAlertType</code></h4>\n<pre class="hljs"><span class="hljs-keyword">type</span> <span class="hljs-title class_">MtxAlertType</span> = <span class="hljs-string">&apos;default&apos;</span> | <span class="hljs-string">&apos;info&apos;</span> | <span class="hljs-string">&apos;success&apos;</span> | <span class="hljs-string">&apos;warning&apos;</span> | <span class="hljs-string">&apos;danger&apos;</span>;\n</pre>\n'},88418:r=>{r.exports='<span class="hljs-selector-tag">label</span> {\n  <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span> <span class="hljs-number">8px</span>;\n}\n'}}]);